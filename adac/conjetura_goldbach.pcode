<?xml version="1.0" encoding="UTF-8"?>
<goldbach>
; --- Programa goldbach
  ENP L0
<declaracion_variables>
; --- Variable n, de tipo INT, por NONE, nivel 0, dirección[3]!
; --- Variable i, de tipo INT, por NONE, nivel 0, dirección[4]!
</declaracion_variables>
<función_pedir_entero>
L1:
  JMP L2
<declaracion_variables>
; --- Variable n, de tipo INT, por NONE, nivel 1, dirección[3]!
</declaracion_variables>
L2:
<bloque_instrucciones_pedir_entero>
<asignación_en_variable_simple_n>
; --- Obteniendo variable simple/parámetro "n".
  SRF  0  3
  STC  0
  ASG
</asignación_en_variable_simple_n>
<while>
L3:
<condición>
; --- Variable simple/parámetro "n".
  SRF  0  3
  DRF
  STC  2
  LTE
; --- Variable simple/parámetro "n".
  SRF  0  3
  DRF
  STC  2
  MOD
  STC  0
  NEQ
  OR
</condición>
  JMF L4
<bloque_instrucciones_while>
<put>
; --- Escribiendo un tipo STRING val: "Dame un numero PAR mayor que 2: " length: 32
  STC 32
  STC 58
  STC 50
  STC 32
  STC 101
  STC 117
  STC 113
  STC 32
  STC 114
  STC 111
  STC 121
  STC 97
  STC 109
  STC 32
  STC 82
  STC 65
  STC 80
  STC 32
  STC 111
  STC 114
  STC 101
  STC 109
  STC 117
  STC 110
  STC 32
  STC 110
  STC 117
  STC 32
  STC 101
  STC 109
  STC 97
  STC 68
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
</put>
<get>
; --- Obteniendo variable simple/parámetro "n".
  SRF  0  3
  RD  1
</get>
</bloque_instrucciones_while>
  JMP L3
L4:
</while>
<return>
; --- Variable simple/parámetro "n".
  SRF  0  3
  DRF
  CSF
</return>
  CSF
</bloque_instrucciones_pedir_entero>
</función_pedir_entero>
<función_es_primo>
L5:
; --- Parámetro k, de tipo INT, por VAL, nivel 1, dirección[3]!
<recuperar_parámetro_1>
; --- Recuperando parámetro k, de tipo INT, por VAL, nivel 1, dirección[3]!
  SRF  0  3
  ASGI
</recuperar_parámetro_1>
  JMP L6
<declaracion_variables>
; --- Variable i, de tipo INT, por NONE, nivel 1, dirección[4]!
; --- Variable primo, de tipo BOOL, por NONE, nivel 1, dirección[5]!
</declaracion_variables>
L6:
<bloque_instrucciones_es_primo>
<asignación_en_variable_simple_i>
; --- Obteniendo variable simple/parámetro "i".
  SRF  0  4
  STC  2
  ASG
</asignación_en_variable_simple_i>
<asignación_en_variable_simple_primo>
; --- Obteniendo variable simple/parámetro "primo".
  SRF  0  5
  STC  1
  ASG
</asignación_en_variable_simple_primo>
<while>
L7:
<condición>
; --- Variable simple/parámetro "i".
  SRF  0  4
  DRF
; --- Variable simple/parámetro "k".
  SRF  0  3
  DRF
  STC  2
  DIV
  LTE
; --- Variable simple/parámetro "primo".
  SRF  0  5
  DRF
  AND
</condición>
  JMF L8
<bloque_instrucciones_while>
<asignación_en_variable_simple_primo>
; --- Obteniendo variable simple/parámetro "primo".
  SRF  0  5
; --- Variable simple/parámetro "k".
  SRF  0  3
  DRF
; --- Variable simple/parámetro "i".
  SRF  0  4
  DRF
  MOD
  STC  0
  NEQ
  ASG
</asignación_en_variable_simple_primo>
<asignación_en_variable_simple_i>
; --- Obteniendo variable simple/parámetro "i".
  SRF  0  4
; --- Variable simple/parámetro "i".
  SRF  0  4
  DRF
  STC  1
  PLUS
  ASG
</asignación_en_variable_simple_i>
</bloque_instrucciones_while>
  JMP L7
L8:
</while>
<return>
; --- Variable simple/parámetro "primo".
  SRF  0  5
  DRF
  CSF
</return>
  CSF
</bloque_instrucciones_es_primo>
</función_es_primo>
<función_hay_un_par>
L9:
; --- Parámetro k, de tipo INT, por VAL, nivel 1, dirección[3]!
<recuperar_parámetro_1>
; --- Recuperando parámetro k, de tipo INT, por VAL, nivel 1, dirección[3]!
  SRF  0  3
  ASGI
</recuperar_parámetro_1>
  JMP L10
<declaracion_variables>
; --- Variable i, de tipo INT, por NONE, nivel 1, dirección[4]!
; --- Variable n, de tipo INT, por NONE, nivel 1, dirección[5]!
; --- Variable a, de tipo INT, por NONE, nivel 1, dirección[6]!
; --- Variable b, de tipo INT, por NONE, nivel 1, dirección[7]!
</declaracion_variables>
L10:
<bloque_instrucciones_hay_un_par>
<asignación_en_variable_simple_a>
; --- Obteniendo variable simple/parámetro "a".
  SRF  0  6
  STC  2
  ASG
</asignación_en_variable_simple_a>
<asignación_en_variable_simple_b>
; --- Obteniendo variable simple/parámetro "b".
  SRF  0  7
  STC  2
  ASG
</asignación_en_variable_simple_b>
<asignación_en_variable_simple_n>
; --- Obteniendo variable simple/parámetro "n".
  SRF  0  5
  STC  0
  ASG
</asignación_en_variable_simple_n>
<put>
; --- Variable simple/parámetro "k".
  SRF  0  3
  DRF
; --- Escribiendo un tipo INT
  WRT  1
</put>
<put>
; --- Escribiendo un tipo STRING val: " es la suma de: " length: 16
  STC 32
  STC 58
  STC 101
  STC 100
  STC 32
  STC 97
  STC 109
  STC 117
  STC 115
  STC 32
  STC 97
  STC 108
  STC 32
  STC 115
  STC 101
  STC 32
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
</put>
<while>
L11:
<condición>
; --- Variable simple/parámetro "a".
  SRF  0  6
  DRF
; --- Variable simple/parámetro "k".
  SRF  0  3
  DRF
  LT
; --- Variable simple/parámetro "b".
  SRF  0  7
  DRF
; --- Variable simple/parámetro "k".
  SRF  0  3
  DRF
  LT
  AND
</condición>
  JMF L12
<bloque_instrucciones_while>
<if-then>
<condición>
<llamada_a_funcion_es_primo>
<parámetro_1>
; --- Variable simple/parámetro "a".
  SRF  0  6
  DRF
</parámetro_1>
  OSF  8  1 L5
</llamada_a_funcion_es_primo>
<llamada_a_funcion_es_primo>
<parámetro_1>
; --- Variable simple/parámetro "b".
  SRF  0  7
  DRF
</parámetro_1>
  OSF  8  1 L5
</llamada_a_funcion_es_primo>
  AND
; --- Variable simple/parámetro "a".
  SRF  0  6
  DRF
; --- Variable simple/parámetro "b".
  SRF  0  7
  DRF
  PLUS
; --- Variable simple/parámetro "k".
  SRF  0  3
  DRF
  EQ
  AND
</condición>
  JMF L13
<then>
<put>
; --- Variable simple/parámetro "a".
  SRF  0  6
  DRF
; --- Escribiendo un tipo INT
  WRT  1
</put>
<put>
; --- Escribiendo un tipo STRING val: "+" length: 1
  STC 43
  WRT  0
</put>
<put>
; --- Variable simple/parámetro "b".
  SRF  0  7
  DRF
; --- Escribiendo un tipo INT
  WRT  1
</put>
<put>
; --- Escribiendo un tipo STRING val: ", " length: 2
  STC 32
  STC 44
  WRT  0
  WRT  0
</put>
<asignación_en_variable_simple_n>
; --- Obteniendo variable simple/parámetro "n".
  SRF  0  5
; --- Variable simple/parámetro "n".
  SRF  0  5
  DRF
  STC  1
  PLUS
  ASG
</asignación_en_variable_simple_n>
</then>
L13:
</if-then>
<asignación_en_variable_simple_a>
; --- Obteniendo variable simple/parámetro "a".
  SRF  0  6
; --- Variable simple/parámetro "a".
  SRF  0  6
  DRF
  STC  1
  PLUS
  ASG
</asignación_en_variable_simple_a>
<if-then>
<condición>
; --- Variable simple/parámetro "a".
  SRF  0  6
  DRF
; --- Variable simple/parámetro "k".
  SRF  0  3
  DRF
  EQ
</condición>
  JMF L14
<then>
<asignación_en_variable_simple_b>
; --- Obteniendo variable simple/parámetro "b".
  SRF  0  7
; --- Variable simple/parámetro "b".
  SRF  0  7
  DRF
  STC  1
  PLUS
  ASG
</asignación_en_variable_simple_b>
<asignación_en_variable_simple_a>
; --- Obteniendo variable simple/parámetro "a".
  SRF  0  6
; --- Variable simple/parámetro "b".
  SRF  0  7
  DRF
  ASG
</asignación_en_variable_simple_a>
</then>
L14:
</if-then>
</bloque_instrucciones_while>
  JMP L11
L12:
</while>
<put>
; --- Variable simple/parámetro "n".
  SRF  0  5
  DRF
; --- Escribiendo un tipo INT
  WRT  1
</put>
<put>
; --- Escribiendo un tipo STRING val: " parejas de primos en total." length: 28
  STC 46
  STC 108
  STC 97
  STC 116
  STC 111
  STC 116
  STC 32
  STC 110
  STC 101
  STC 32
  STC 115
  STC 111
  STC 109
  STC 105
  STC 114
  STC 112
  STC 32
  STC 101
  STC 100
  STC 32
  STC 115
  STC 97
  STC 106
  STC 101
  STC 114
  STC 97
  STC 112
  STC 32
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
</put>
<put_line>
; --- CR/LF
  STC 13
  WRT  0
  STC 10
  WRT  0
</put_line>
<return>
; --- Variable simple/parámetro "n".
  SRF  0  5
  DRF
  STC  0
  GT
  CSF
</return>
  CSF
</bloque_instrucciones_hay_un_par>
</función_hay_un_par>
L0:
<bloque_instrucciones_goldbach>
<put>
; --- Escribiendo un tipo STRING val: "Conjetura de Golbach: todo número par mayor que 2 puede escribirse como suma de dos números primos." length: 99
  STC 46
  STC 115
  STC 111
  STC 109
  STC 105
  STC 114
  STC 112
  STC 32
  STC 115
  STC 111
  STC 114
  STC 101
  STC 109
  STC 250
  STC 110
  STC 32
  STC 115
  STC 111
  STC 100
  STC 32
  STC 101
  STC 100
  STC 32
  STC 97
  STC 109
  STC 117
  STC 115
  STC 32
  STC 111
  STC 109
  STC 111
  STC 99
  STC 32
  STC 101
  STC 115
  STC 114
  STC 105
  STC 98
  STC 105
  STC 114
  STC 99
  STC 115
  STC 101
  STC 32
  STC 101
  STC 100
  STC 101
  STC 117
  STC 112
  STC 32
  STC 50
  STC 32
  STC 101
  STC 117
  STC 113
  STC 32
  STC 114
  STC 111
  STC 121
  STC 97
  STC 109
  STC 32
  STC 114
  STC 97
  STC 112
  STC 32
  STC 111
  STC 114
  STC 101
  STC 109
  STC 250
  STC 110
  STC 32
  STC 111
  STC 100
  STC 111
  STC 116
  STC 32
  STC 58
  STC 104
  STC 99
  STC 97
  STC 98
  STC 108
  STC 111
  STC 71
  STC 32
  STC 101
  STC 100
  STC 32
  STC 97
  STC 114
  STC 117
  STC 116
  STC 101
  STC 106
  STC 110
  STC 111
  STC 67
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
</put>
<put_line>
; --- CR/LF
  STC 13
  WRT  0
  STC 10
  WRT  0
</put_line>
<put>
; --- Escribiendo un tipo STRING val: "https://es.wikipedia.org/wiki/Conjetura_de_Goldbach" length: 51
  STC 104
  STC 99
  STC 97
  STC 98
  STC 100
  STC 108
  STC 111
  STC 71
  STC 95
  STC 101
  STC 100
  STC 95
  STC 97
  STC 114
  STC 117
  STC 116
  STC 101
  STC 106
  STC 110
  STC 111
  STC 67
  STC 47
  STC 105
  STC 107
  STC 105
  STC 119
  STC 47
  STC 103
  STC 114
  STC 111
  STC 46
  STC 97
  STC 105
  STC 100
  STC 101
  STC 112
  STC 105
  STC 107
  STC 105
  STC 119
  STC 46
  STC 115
  STC 101
  STC 47
  STC 47
  STC 58
  STC 115
  STC 112
  STC 116
  STC 116
  STC 104
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
</put>
<put_line>
; --- CR/LF
  STC 13
  WRT  0
  STC 10
  WRT  0
</put_line>
<put_line>
<put>
</put>
; --- CR/LF
  STC 13
  WRT  0
  STC 10
  WRT  0
</put_line>
<put>
; --- Escribiendo un tipo STRING val: "Este programa comprueba si es cierta hasta el número que le digas." length: 66
  STC 46
  STC 115
  STC 97
  STC 103
  STC 105
  STC 100
  STC 32
  STC 101
  STC 108
  STC 32
  STC 101
  STC 117
  STC 113
  STC 32
  STC 111
  STC 114
  STC 101
  STC 109
  STC 250
  STC 110
  STC 32
  STC 108
  STC 101
  STC 32
  STC 97
  STC 116
  STC 115
  STC 97
  STC 104
  STC 32
  STC 97
  STC 116
  STC 114
  STC 101
  STC 105
  STC 99
  STC 32
  STC 115
  STC 101
  STC 32
  STC 105
  STC 115
  STC 32
  STC 97
  STC 98
  STC 101
  STC 117
  STC 114
  STC 112
  STC 109
  STC 111
  STC 99
  STC 32
  STC 97
  STC 109
  STC 97
  STC 114
  STC 103
  STC 111
  STC 114
  STC 112
  STC 32
  STC 101
  STC 116
  STC 115
  STC 69
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
</put>
<put_line>
; --- CR/LF
  STC 13
  WRT  0
  STC 10
  WRT  0
</put_line>
<put_line>
<put>
</put>
; --- CR/LF
  STC 13
  WRT  0
  STC 10
  WRT  0
</put_line>
<asignación_en_variable_simple_n>
; --- Obteniendo variable simple/parámetro "n".
  SRF  0  3
<llamada_a_funcion_pedir_entero>
  OSF  5  0 L1
</llamada_a_funcion_pedir_entero>
  ASG
</asignación_en_variable_simple_n>
<asignación_en_variable_simple_i>
; --- Obteniendo variable simple/parámetro "i".
  SRF  0  4
  STC  4
  ASG
</asignación_en_variable_simple_i>
<while>
L15:
<condición>
; --- Variable simple/parámetro "i".
  SRF  0  4
  DRF
; --- Variable simple/parámetro "n".
  SRF  0  3
  DRF
  LTE
</condición>
  JMF L16
<bloque_instrucciones_while>
<if-then>
<condición>
<llamada_a_funcion_hay_un_par>
<parámetro_1>
; --- Variable simple/parámetro "i".
  SRF  0  4
  DRF
</parámetro_1>
  OSF  5  0 L9
</llamada_a_funcion_hay_un_par>
  NGB
</condición>
  JMF L17
<then>
<put>
; --- Escribiendo un tipo STRING val: "L conjetura no se cumple para " length: 30
  STC 32
  STC 97
  STC 114
  STC 97
  STC 112
  STC 32
  STC 101
  STC 108
  STC 112
  STC 109
  STC 117
  STC 99
  STC 32
  STC 101
  STC 115
  STC 32
  STC 111
  STC 110
  STC 32
  STC 97
  STC 114
  STC 117
  STC 116
  STC 101
  STC 106
  STC 110
  STC 111
  STC 99
  STC 32
  STC 76
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
</put>
<put>
; --- Variable simple/parámetro "i".
  SRF  0  4
  DRF
; --- Escribiendo un tipo INT
  WRT  1
</put>
<put>
; --- Escribiendo un tipo STRING val: "! (Seguro que por error del compilador!)" length: 40
  STC 41
  STC 33
  STC 114
  STC 111
  STC 100
  STC 97
  STC 108
  STC 105
  STC 112
  STC 109
  STC 111
  STC 99
  STC 32
  STC 108
  STC 101
  STC 100
  STC 32
  STC 114
  STC 111
  STC 114
  STC 114
  STC 101
  STC 32
  STC 114
  STC 111
  STC 112
  STC 32
  STC 101
  STC 117
  STC 113
  STC 32
  STC 111
  STC 114
  STC 117
  STC 103
  STC 101
  STC 83
  STC 40
  STC 32
  STC 33
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
  WRT  0
</put>
<put_line>
; --- CR/LF
  STC 13
  WRT  0
  STC 10
  WRT  0
</put_line>
</then>
L17:
</if-then>
<asignación_en_variable_simple_i>
; --- Obteniendo variable simple/parámetro "i".
  SRF  0  4
; --- Variable simple/parámetro "i".
  SRF  0  4
  DRF
  STC  2
  PLUS
  ASG
</asignación_en_variable_simple_i>
</bloque_instrucciones_while>
  JMP L15
L16:
</while>
</bloque_instrucciones_goldbach>
  LVP
</goldbach>
