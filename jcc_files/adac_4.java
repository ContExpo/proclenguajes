/* adac_4.java */
/* Generated By:JavaCC: Do not edit this line. adac_4.java */
package traductor;
import java.util.Set;
import java.util.HashSet;
import lib.symbolTable.*;
import lib.errores.*;
import lib.attributes.Attributes;
import lib.symbolTable.exceptions.*;
import java.util.ArrayList;
import lib.tools.codeGeneration.*;

public class adac_4 implements adac_4Constants {

        static SymbolTable st = new SymbolTable();
        static ErrorSemantico es;
        static CGUtils cgu;
        //Variable booleana para decidir si se genera código para hacer comprobaciones
        //en tiempo de ejecución
        static boolean genErrEjec = true;
        private static void initSymbolTable() {
                boolean b;
                String[] palsRes = {
                        "procedure", "function", "val", "ref", "integer", "character", "boolean", "is", "begin", "end",
                        "if", "else","while", "then", "return", "mod", "div", "true", "false", "not", "and", "function",
                        "get", "char2int", "int2char", "skip_line", "put", "put_line"
                };

                st.insertReservedWords(palsRes);
        }

    public static void main(String[] args) {
                adac_4 parser;
                try {
                if(args.length == 0) { //entrada desde stdin
                                parser = new adac_4(System.in);
                        }
                        else { //entrada desde fichero en args[0]
                                parser = new adac_4(new java.io.FileInputStream(args[0]));
                        }
                        parser.S(); //invoca símbolo inicial de la gramática
                }
                catch (java.io.FileNotFoundException e) {
                        System.err.println ("Fichero " + args[0] + " no encontrado.");
                }
                catch (TokenMgrError e) {
                        System.err.println("LEX_ERROR: " + e.getMessage());
        }
        catch (ParseException e) {
                        System.err.println("SINT_ERROR: " + e.getMessage());
        }
    }

//------------ Símbolo inicial de la gramática. Para análisis léxico no hace falta más
  static final public void S() throws ParseException {CodeBlock cb = new CodeBlock();
        Token t1 = new Token();
        String mainLabel = "";
        Attributes dec_vars, dec_procs_funcs, main;
    try {
      jj_consume_token(tPROC);
      t1 = jj_consume_token(tID);
      jj_consume_token(tIS);
cgu.memorySpaces[st.level] = 3;
                        SymbolProcedure s = new SymbolProcedure(t1.image, new ArrayList<Symbol>());
                        st.insertSymbol(s);
                        cb.addComment("Programa " + t1.image);
                        mainLabel = cgu.newLabel();
                        cb.addInst(PCodeInstruction.OpCode.ENP, mainLabel);
      dec_vars = declaracion_variables();
cb.addBlock(dec_vars.block);
      dec_procs_funcs = declaracion_procs_funcs();
cb.addBlock(dec_procs_funcs.block);
                        cb.addLabel(mainLabel);
      main = bloque_sentencias(t1.image, Symbol.Types.PROCEDURE, Symbol.Types.UNDEFINED);
cb.addBlock(main.block);
      jj_consume_token(0);
    } catch (ParseException e) {
Set<Integer> conjSinc = infoParseException(e);
                //añadir tokens al conj de sincronización
                //conjSinc.add(token);
                recuperacionPanico(e.currentToken.next, conjSinc);
    } catch (AlreadyDefinedSymbolException e) {
System.err.println("Error: " + t1.image + " ya est\u00e1 declarado");
    }
cb.addInst(PCodeInstruction.OpCode.LVP);
                cb.encloseXMLTags(t1.image);

                //Generar código solo si no hay errores
                if (es.getContadorErrores() == 0) {
                        System.out.println("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
                        System.out.println(cb.toString());
                } else {
                        System.out.println("Presencia de errores en el fichero fuente. Abortada la generaci\u00f3n de c\u00f3digo.");
                }
}

//declaracion_variables : ( declaracion <tSCOL> )*
  static final public Attributes declaracion_variables() throws ParseException {Attributes a = new Attributes();
        Attributes temp;
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tBOOL:
        case tCHDECL:
        case tINT:{
          ;
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        temp = declaracion();
        jj_consume_token(tSCOL);
a.block.addBlock(temp.block);
      }
    } catch (ParseException e) {
Set<Integer> conjSinc = infoParseException(e);
                //añadir tokens al conj de sincronización
                conjSinc.add(tSCOL);
                recuperacionPanico(e.currentToken.next, conjSinc);
    }
a.block.encloseXMLTags("declaracion_variables");
                {if ("" != null) return a;}
    throw new Error("Missing return statement in function");
}

//declaracion : tipo_variable lista_vars
  static final public Attributes declaracion() throws ParseException {Symbol.Types type;
        ArrayList<Attributes> vars, temp;
        Attributes toRet = null;
    try {
      type = tipo_variable();
      toRet = lista_vars(type);
    } catch (ParseException e) {
Set<Integer> conjSinc = infoParseException(e);
                //añadir tokens al conj de sincronización
                conjSinc.add(tSCOL);
                recuperacionPanico(e.currentToken.next, conjSinc);
    }
{if ("" != null) return toRet;}
    throw new Error("Missing return statement in function");
}

// tipo_variable : <tINT> | <tCHDECL> | <tBOOL>
  static final public Symbol.Types tipo_variable() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tINT:{
        jj_consume_token(tINT);
{if ("" != null) return Symbol.Types.INT;}
        break;
        }
      case tCHDECL:{
        jj_consume_token(tCHDECL);
{if ("" != null) return Symbol.Types.CHAR;}
        break;
        }
      case tBOOL:{
        jj_consume_token(tBOOL);
{if ("" != null) return Symbol.Types.BOOL;}
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
Set<Integer> conjSinc = infoParseException(e);
                //añadir tokens al conj de sincronización
                conjSinc.add(tSCOL);
                recuperacionPanico(e.currentToken.next, conjSinc);
    }
    throw new Error("Missing return statement in function");
}

//lista_vars : variable ( <tCOMMA> variable )*
  static final public Attributes lista_vars(Symbol.Types type) throws ParseException {Attributes a = new Attributes();
        Attributes temp;
    try {
      temp = variable(type);
a.block.addBlock(temp.block);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tCOMMA:{
          ;
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        jj_consume_token(tCOMMA);
        temp = variable(type);
a.block.addBlock(temp.block);
      }
    } catch (ParseException e) {
Set<Integer> conjSinc = infoParseException(e);
                //añadir tokens al conj de sincronización
                conjSinc.add(tSCOL);
                conjSinc.add(tCOMMA);
                recuperacionPanico(e.currentToken.next, conjSinc);
    }
{if ("" != null) return a;}
    throw new Error("Missing return statement in function");
}

//variable : LOOKAHEAD(2)
//				<tID> <tACOR> <tCONST_INT> <tCCOR>
//			|	<tID>
  static final public Attributes variable(Symbol.Types type) throws ParseException {Token t1;
        Token t2;
        Attributes a = new Attributes();
    try {
      if (jj_2_1(2)) {
        t1 = jj_consume_token(tID);
        jj_consume_token(tSQOP);
        t2 = jj_consume_token(tNUM);
        jj_consume_token(tSQCL);
try {
                                SymbolArray sArr = new SymbolArray(t1.image, Integer.parseInt(t2.image), type);
                                sArr.dir = cgu.memorySpaces[st.level];
                                //Reservar tanto espacio en memoria como componentes tenga el vector
                                int tamanyo = sArr.maxInd - sArr.minInd + 1;
                                cgu.memorySpaces[st.level] += tamanyo;
                                st.insertSymbol(sArr);
                                a.block.addComment(String.format("Variable %s, de tipo %s, de tama\u00f1o %d, por %s, nivel %d, direcci\u00f3n[%d:%d]!",
                                        sArr.name, sArr.type + "[" + sArr.baseType + "]", tamanyo, sArr.parClass, sArr.nivel, sArr.dir, sArr.dir + tamanyo - 1));
                        } catch(AlreadyDefinedSymbolException e) {
                                System.err.println("Error: " + t1.image + " ya est\u00e1 declarado");
                        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tID:{
          t1 = jj_consume_token(tID);
try {
                                switch (type) {
                                        case INT :
                                                SymbolInt sInt = new SymbolInt(t1.image);
                                                sInt.dir = cgu.memorySpaces[st.level]++;
                                                st.insertSymbol(sInt);
                                                a.block.addComment(String.format("Variable %s, de tipo %s, por %s, nivel %d, direcci\u00f3n[%d]!",
                                                        sInt.name, sInt.type, sInt.parClass, sInt.nivel, sInt.dir));
                                                break;

                                        case CHAR :
                                                SymbolChar sChar = new SymbolChar(t1.image);
                                                sChar.dir = cgu.memorySpaces[st.level]++;
                                                st.insertSymbol(sChar);
                                                a.block.addComment(String.format("Variable %s, de tipo %s, por %s, nivel %d, direcci\u00f3n[%d]!",
                                                        sChar.name, sChar.type, sChar.parClass, sChar.nivel, sChar.dir));
                                                break;

                                        case BOOL :
                                                SymbolBool sBool = new SymbolBool(t1.image);
                                                sBool.dir = cgu.memorySpaces[st.level]++;
                                                st.insertSymbol(sBool);
                                                a.block.addComment(String.format("Variable %s, de tipo %s, por %s, nivel %d, direcci\u00f3n[%d]!",
                                                        sBool.name, sBool.type, sBool.parClass, sBool.nivel, sBool.dir));
                                                break;
                                        default: es.deteccion("Error: " + type + " no es un tipo v\u00e1lido", token);
                                }
                        } catch(AlreadyDefinedSymbolException e) {
                                System.err.println("Error: " + t1.image + " ya est\u00e1 declarado");
                        }
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException e) {
Set<Integer> conjSinc = infoParseException(e);
                //añadir tokens al conj de sincronización
                conjSinc.add(tSCOL);
                conjSinc.add(tCOMMA);
                recuperacionPanico(e.currentToken.next, conjSinc);
    }
{if ("" != null) return a;}
    throw new Error("Missing return statement in function");
}

//declaracion_procs_funcs : ( declaracion_proc_func )*
  static final public Attributes declaracion_procs_funcs() throws ParseException {Attributes toRet = new Attributes();
        Attributes decPF = null;
    try {
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tPROC:
        case tFUNC:{
          ;
          break;
          }
        default:
          jj_la1[4] = jj_gen;
          break label_3;
        }
        decPF = declaracion_proc_func();
toRet.block.addBlock(decPF.block);
      }
    } catch (ParseException e) {
Set<Integer> conjSinc = infoParseException(e);
                //añadir tokens al conj de sincronización
                recuperacionPanico(e.currentToken.next, conjSinc);
    }
{if ("" != null) return toRet;}
    throw new Error("Missing return statement in function");
}

//declaracion_proc_func :	declaracion_proceso
//						|	declaracion_funcion
  static final public Attributes declaracion_proc_func() throws ParseException {Attributes toRet = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tPROC:{
        toRet = declaracion_proceso();
        break;
        }
      case tFUNC:{
        toRet = declaracion_funcion();
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
Set<Integer> conjSinc = infoParseException(e);
                //añadir tokens al conj de sincronización
                recuperacionPanico(e.currentToken.next, conjSinc);
    }
{if ("" != null) return toRet;}
    throw new Error("Missing return statement in function");
}

//declaracion_proceso : cabecera_proceso declaracion_variables declaracion_procs_funcs bloque_sentencias
  static final public Attributes declaracion_proceso() throws ParseException {Attributes attrCab;
        Attributes attrDecl;
        Attributes attrDeclPF;
        Attributes attrBloque;
        Attributes toRet = new Attributes();
    try {
      attrCab = cabecera_proceso();
toRet.block.addBlock(attrCab.block);
      attrDecl = declaracion_variables();
toRet.block.addBlock(attrDecl.block);
      attrDeclPF = declaracion_procs_funcs();
toRet.block.addBlock(attrDeclPF.block);
                        //Añadimos la etiqueta de inicio del procedimiento
                        //Dentro de cabecera_funcion ya se ha reservado ésta dirección
                        toRet.block.addLabel("L"+(attrCab.simbolo.dir+1));
      attrBloque = bloque_sentencias(attrCab.name, Symbol.Types.PROCEDURE, Symbol.Types.UNDEFINED);
toRet.block.addBlock(attrBloque.block);
                        toRet.block.encloseXMLTags("procedimiento_" + attrCab.name);
    } catch (ParseException e) {
Set<Integer> conjSinc = infoParseException(e);
                //añadir tokens al conj de sincronización
                recuperacionPanico(e.currentToken.next, conjSinc);
    }
{if ("" != null) return toRet;}
    throw new Error("Missing return statement in function");
}

//cabecera_proceso : <tPROC> <tID> ( decs_parametros )? <tIS>
  static final public Attributes cabecera_proceso() throws ParseException {Attributes toRet = new Attributes();
        Token t1 = new Token();
        ArrayList<Symbol> parList = new ArrayList<Symbol>();
    try {
      jj_consume_token(tPROC);
      t1 = jj_consume_token(tID);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tPTOP:{
        parList = decs_parametros();
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      jj_consume_token(tIS);
SymbolProcedure s = new SymbolProcedure(t1.image, parList);

                        //El procedimiento no lo queremos reservar en memoria.
                        //Solo necesitamos saber cuál es el número de su etiqueta de inicio
                        String labelInicio = cgu.newLabel();
                        s.dir = Integer.parseInt(labelInicio.substring(1));

                        st.insertSymbol(s);
                        st.insertBlock();
                        cgu.memorySpaces[st.level] = 3;

                        //Generación de la etiqueta de inicio
                        toRet.block.addLabel("L"+s.dir);

                        for (Symbol par : parList) {
                                par.dir = cgu.memorySpaces[st.level]++;
                                st.insertSymbol(par);

                                //Comentario de declaración de parámetro
                                //Distinción del caso de vector
                                if (par.type == Symbol.Types.ARRAY) {
                                        SymbolArray sArr = (SymbolArray) par;
                                        int tamanyo = sArr.maxInd - sArr.minInd + 1;

                                        //En caso de ser vector por referencia, no hace falta declarar cada componente,
                                        //solo la dirección de inicio
                                        if (par.parClass == Symbol.ParameterClass.REF) {
                                                toRet.block.addComment(String.format("Par\u00e1metro %s, de tipo %s, de tama\u00f1o %d, por %s, nivel %d, direcci\u00f3n[%d]!",
                                                        sArr.name, sArr.type + "[" + sArr.baseType + "]", tamanyo, sArr.parClass, sArr.nivel, sArr.dir));
                                        } else {
                                                cgu.memorySpaces[st.level] += tamanyo - 1;

                                                toRet.block.addComment(String.format("Par\u00e1metro %s, de tipo %s, de tama\u00f1o %d, por %s, nivel %d, direcci\u00f3n[%d:%d]!",
                                                        sArr.name, sArr.type + "[" + sArr.baseType + "]", tamanyo, sArr.parClass, sArr.nivel, sArr.dir, sArr.dir + tamanyo - 1));
                                        }
                                } else {
                                        toRet.block.addComment(String.format("Par\u00e1metro %s, de tipo %s, por %s, nivel %d, direcci\u00f3n[%d]!",
                                                                par.name, par.type, par.parClass, par.nivel, par.dir));
                                }
                        }

                        //Recuperación de cada variable en el stack (en orden inverso)
                        for (int i = parList.size()-1; i >= 0; i--) {
                                Symbol par = parList.get(i);
                                CodeBlock cod = new CodeBlock();

                                //Distinción del caso de vector
                                if (par.type == Symbol.Types.ARRAY) {
                                        SymbolArray sArr = (SymbolArray) par;
                                        int tamanyo = sArr.maxInd - sArr.minInd + 1;

                                        //En caso de ser vector por referencia, no hace falta recuperar cada componente,
                                        //solo la dirección de inicio
                                        if (par.parClass == Symbol.ParameterClass.REF) {
                                                cod.addComment(String.format("Recuperando par\u00e1metro %s, de tipo %s, de tama\u00f1o %d, por %s, nivel %d, direcci\u00f3n[%d]!",
                                                        sArr.name, sArr.type + "[" + sArr.baseType + "]", tamanyo, sArr.parClass, sArr.nivel, sArr.dir));

                                                cod.addInst(PCodeInstruction.OpCode.SRF, st.level - par.nivel , (int)par.dir);
                                                cod.addInst(PCodeInstruction.OpCode.ASGI);
                                        } else {
                                                cod.addComment(String.format("Recuperando par\u00e1metro %s, de tipo %s, de tama\u00f1o %d, por %s, nivel %d, direcci\u00f3n[%d:%d]!",
                                                        sArr.name, sArr.type + "[" + sArr.baseType + "]", tamanyo, sArr.parClass, sArr.nivel, sArr.dir, sArr.dir + tamanyo - 1));

                                                for (int j = (int)sArr.dir + tamanyo - 1; j >= sArr.dir; j--) {
                                                        cod.addInst(PCodeInstruction.OpCode.SRF, st.level - par.nivel , j);
                                                        cod.addInst(PCodeInstruction.OpCode.ASGI);
                                                }
                                        }
                                } else {
                                        cod.addComment(String.format("Recuperando par\u00e1metro %s, de tipo %s, por %s, nivel %d, direcci\u00f3n[%d]!",
                                                                par.name, par.type, par.parClass, par.nivel, par.dir));

                                        cod.addInst(PCodeInstruction.OpCode.SRF, st.level - par.nivel , (int)par.dir);
                                        cod.addInst(PCodeInstruction.OpCode.ASGI);
                                }

                                cod.encloseXMLTags(String.format("recuperar_par\u00e1metro_%d",i+1));
                                toRet.block.addBlock(cod);
                        }
                        //Sabemos que siempre vamos a saltar al label siguiente del de inicio de función
                        toRet.block.addInst(PCodeInstruction.OpCode.JMP, cgu.newLabel());

                        toRet.type = s.type;
                        toRet.name = s.name;
                        toRet.simbolo = s;
    } catch (ParseException e) {
Set<Integer> conjSinc = infoParseException(e);
                //añadir tokens al conj de sincronización
                conjSinc.add(tIS);
                recuperacionPanico(e.currentToken.next, conjSinc);
    } catch (AlreadyDefinedSymbolException e) {
System.err.println("Error: " + t1.image + " ya est\u00e1 declarado");
    }
{if ("" != null) return toRet;}
    throw new Error("Missing return statement in function");
}

//declaracion_funcion : cabecera_funcion declaracion_variables declaracion_procs_funcs bloque_sentencias
  static final public Attributes declaracion_funcion() throws ParseException {Attributes attrCab;
        Attributes attrDecl;
        Attributes attrDeclPF;
        Attributes attrBloque;
        Attributes toRet = new Attributes();
    try {
      attrCab = cabecera_funcion();
toRet.block.addBlock(attrCab.block);
      attrDecl = declaracion_variables();
toRet.block.addBlock(attrDecl.block);
      attrDeclPF = declaracion_procs_funcs();
toRet.block.addBlock(attrDeclPF.block);
                        //Añadimos la etiqueta de inicio de la función
                        //Dentro de cabecera_funcion ya se ha reservado ésta dirección
                        toRet.block.addLabel("L"+(attrCab.simbolo.dir+1));
      attrBloque = bloque_sentencias(attrCab.name, Symbol.Types.FUNCTION, attrCab.type);
toRet.block.addBlock(attrBloque.block);
                        toRet.block.encloseXMLTags("funci\u00f3n_" + attrCab.name);
    } catch (ParseException e) {
Set<Integer> conjSinc = infoParseException(e);
                //añadir tokens al conj de sincronización
                recuperacionPanico(e.currentToken.next, conjSinc);
    }
{if ("" != null) return toRet;}
    throw new Error("Missing return statement in function");
}

//cabecera_funcion : <tFUNC> tipo_variable <tID> ( decs_parametros )? <tIS>
  static final public Attributes cabecera_funcion() throws ParseException {Attributes toRet = new Attributes();
        Token t1 = new Token();
        Symbol.Types type;
        ArrayList<Symbol> parList = new ArrayList<Symbol>();
    try {
      jj_consume_token(tFUNC);
      type = tipo_variable();
      t1 = jj_consume_token(tID);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tPTOP:{
        parList = decs_parametros();
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      jj_consume_token(tIS);
SymbolFunction s = new SymbolFunction(t1.image, parList, type);

                        //La función no la queremos reservar en memoria.
                        //Solo necesitamos saber cuál es el número de su etiqueta de inicio
                        String labelInicio = cgu.newLabel();
                        s.dir = Integer.parseInt(labelInicio.substring(1));

                        st.insertSymbol(s);
                        st.insertBlock();
                        cgu.memorySpaces[st.level] = 3;

                        //Generación de la etiqueta de inicio
                        toRet.block.addLabel("L"+s.dir);

                        for (Symbol par : parList) {
                                par.dir = cgu.memorySpaces[st.level]++;
                                st.insertSymbol(par);

                                //Comentario de declaración de parámetro
                                //Distinción del caso de vector
                                if (par.type == Symbol.Types.ARRAY) {
                                        SymbolArray sArr = (SymbolArray) par;
                                        int tamanyo = sArr.maxInd - sArr.minInd + 1;

                                        //En caso de ser vector por referencia, no hace falta declarar cada componente,
                                        //solo la dirección de inicio
                                        if (par.parClass == Symbol.ParameterClass.REF) {
                                                toRet.block.addComment(String.format("Par\u00e1metro %s, de tipo %s, de tama\u00f1o %d, por %s, nivel %d, direcci\u00f3n[%d]!",
                                                        sArr.name, sArr.type + "[" + sArr.baseType + "]", tamanyo, sArr.parClass, sArr.nivel, sArr.dir));
                                        } else {
                                                cgu.memorySpaces[st.level] += tamanyo - 1;

                                                toRet.block.addComment(String.format("Par\u00e1metro %s, de tipo %s, de tama\u00f1o %d, por %s, nivel %d, direcci\u00f3n[%d:%d]!",
                                                        sArr.name, sArr.type + "[" + sArr.baseType + "]", tamanyo, sArr.parClass, sArr.nivel, sArr.dir, sArr.dir + tamanyo - 1));
                                        }
                                } else {
                                        toRet.block.addComment(String.format("Par\u00e1metro %s, de tipo %s, por %s, nivel %d, direcci\u00f3n[%d]!",
                                                                par.name, par.type, par.parClass, par.nivel, par.dir));
                                }
                        }

                        //Recuperación de cada variable en el stack (en orden inverso)
                        for (int i = parList.size()-1; i >= 0; i--) {
                                Symbol par = parList.get(i);
                                CodeBlock cod = new CodeBlock();

                                //Distinción del caso de vector
                                if (par.type == Symbol.Types.ARRAY) {
                                        SymbolArray sArr = (SymbolArray) par;
                                        int tamanyo = sArr.maxInd - sArr.minInd + 1;

                                        //En caso de ser vector por referencia, no hace falta recuperar cada componente,
                                        //solo la dirección de inicio
                                        if (par.parClass == Symbol.ParameterClass.REF) {
                                                cod.addComment(String.format("Recuperando par\u00e1metro %s, de tipo %s, de tama\u00f1o %d, por %s, nivel %d, direcci\u00f3n[%d]!",
                                                        sArr.name, sArr.type + "[" + sArr.baseType + "]", tamanyo, sArr.parClass, sArr.nivel, sArr.dir));

                                                cod.addInst(PCodeInstruction.OpCode.SRF, st.level - par.nivel , (int)par.dir);
                                                cod.addInst(PCodeInstruction.OpCode.ASGI);
                                        } else {
                                                cod.addComment(String.format("Recuperando par\u00e1metro %s, de tipo %s, de tama\u00f1o %d, por %s, nivel %d, direcci\u00f3n[%d:%d]!",
                                                        sArr.name, sArr.type + "[" + sArr.baseType + "]", tamanyo, sArr.parClass, sArr.nivel, sArr.dir, sArr.dir + tamanyo - 1));

                                                for (int j = (int)sArr.dir + tamanyo - 1; j >= sArr.dir; j--) {
                                                        cod.addInst(PCodeInstruction.OpCode.SRF, st.level - par.nivel , j);
                                                        cod.addInst(PCodeInstruction.OpCode.ASGI);
                                                }
                                        }
                                } else {
                                        cod.addComment(String.format("Recuperando par\u00e1metro %s, de tipo %s, por %s, nivel %d, direcci\u00f3n[%d]!",
                                                                par.name, par.type, par.parClass, par.nivel, par.dir));

                                        cod.addInst(PCodeInstruction.OpCode.SRF, st.level - par.nivel , (int)par.dir);
                                        cod.addInst(PCodeInstruction.OpCode.ASGI);
                                }

                                cod.encloseXMLTags(String.format("recuperar_par\u00e1metro_%d",i+1));
                                toRet.block.addBlock(cod);
                        }
                        //Sabemos que siempre vamos a saltar al label siguiente del de inicio de función
                        toRet.block.addInst(PCodeInstruction.OpCode.JMP, cgu.newLabel());

                        toRet.type = s.returnType;
                        toRet.name = s.name;
                        toRet.simbolo = s;
    } catch (ParseException e) {
Set<Integer> conjSinc = infoParseException(e);
                //añadir tokens al conj de sincronización
                conjSinc.add(tIS);
                recuperacionPanico(e.currentToken.next, conjSinc);
    } catch (AlreadyDefinedSymbolException e) {
System.err.println("Error: " + t1.image + " ya est\u00e1 declarado");
    }
{if ("" != null) return toRet;}
    throw new Error("Missing return statement in function");
}

//bloque_sentencias : <tBEGIN> ( instruccion )* <tEND>
  static final public Attributes bloque_sentencias(String nom, Symbol.Types proc_or_func, Symbol.Types retType) throws ParseException {boolean hayReturn = false;
        boolean aux = false;
        Attributes temp = null;
        Attributes toRet = new Attributes();
    try {
      jj_consume_token(tBEGIN);
System.err.println("***********************");
                        System.err.println("Procesando " + nom);
                        System.err.println("***********************");
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tRET:
        case tIF:
        case tWHIL:
        case tGET:
        case tSKIPL:
        case tPUT:
        case tPUTL:
        case tID:{
          ;
          break;
          }
        default:
          jj_la1[8] = jj_gen;
          break label_4;
        }
        temp = instruccion();
toRet.block.addBlock(temp.block);
                                aux = temp.hayReturn;
                                hayReturn |= aux;
      }
      jj_consume_token(tEND);
if (proc_or_func == Symbol.Types.FUNCTION && !hayReturn) {
                                System.err.println("Error: No hay return en la funci\u00f3n");
                        }
    } catch (ParseException e) {
Set<Integer> conjSinc = infoParseException(e);
                //añadir tokens al conj de sincronización
                conjSinc.add(tEND);
                recuperacionPanico(e.currentToken.next, conjSinc);
    }
//Si no estamos en el bloque de instrucciones del procedimiento principal
                //hay que añadir la instrucción para recuperar el stack frame
                //toRet.block.addComment("Bloque de instrucciones de nivel "+st.level);
                if (st.level > 0) {
                        toRet.block.addInst(PCodeInstruction.OpCode.CSF);
                }
                toRet.block.encloseXMLTags("bloque_instrucciones_"+nom);
                //System.err.println(st.toString());
                st.removeBlock();
                {if ("" != null) return toRet;}
    throw new Error("Missing return statement in function");
}

//decs_parametros : <tPTOP> ( dec_parametros ( <tSCOL> dec_parametros )* )? <tPTCL>
  static final public ArrayList<Symbol> decs_parametros() throws ParseException {ArrayList<Symbol> partialList = new ArrayList<Symbol>();
        ArrayList<Symbol> parList = new ArrayList<Symbol>();
    try {
      jj_consume_token(tPTOP);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tVAL:
      case tREF:{
        partialList = dec_parametros();
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case tSCOL:{
            ;
            break;
            }
          default:
            jj_la1[9] = jj_gen;
            break label_5;
          }
          jj_consume_token(tSCOL);
parList.addAll(partialList);
          partialList = dec_parametros();
        }
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        ;
      }
      jj_consume_token(tPTCL);
parList.addAll(partialList);
    } catch (ParseException e) {
Set<Integer> conjSinc = infoParseException(e);
                //añadir tokens al conj de sincronización
                conjSinc.add(tIS);
                conjSinc.add(tPTCL);
                conjSinc.add(tSCOL);
                recuperacionPanico(e.currentToken.next, conjSinc);
    }
{if ("" != null) return parList;}
    throw new Error("Missing return statement in function");
}

//dec_parametros : clase_parametros tipo_variable id_or_array ( <tCOMMA> id_or_array )*
  static final public ArrayList<Symbol> dec_parametros() throws ParseException {Symbol.ParameterClass parClass = Symbol.ParameterClass.NONE;
        Symbol.Types type;
        Symbol par;
        ArrayList<Symbol> parList = new ArrayList<Symbol>();
    try {
      parClass = clase_parametros();
      //Si es ref o val
                      type = tipo_variable();
      //Si es string, int...
                      par = id_or_array(type);
par.parClass = parClass;
                        parList.add(par);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tCOMMA:{
          ;
          break;
          }
        default:
          jj_la1[11] = jj_gen;
          break label_6;
        }
        jj_consume_token(tCOMMA);
        par = id_or_array(type);
par.parClass = parClass;
                                parList.add(par);
      }
    } catch (ParseException e) {
Set<Integer> conjSinc = infoParseException(e);
                //añadir tokens al conj de sincronización
                conjSinc.add(tIS);
                conjSinc.add(tPTCL);
                conjSinc.add(tSCOL);
                conjSinc.add(tCOMMA);
                recuperacionPanico(e.currentToken.next, conjSinc);
    }
{if ("" != null) return parList;}
    throw new Error("Missing return statement in function");
}

//id_or_array : LOOKAHEAD(2)
//					<tID> <tSQOP> <tNUM> <tSQCL>
//				|	<tID>
  static final public Symbol id_or_array(Symbol.Types type) throws ParseException {Token t1;
        Token t2;
    try {
      if (jj_2_2(2)) {
        t1 = jj_consume_token(tID);
        jj_consume_token(tSQOP);
        t2 = jj_consume_token(tNUM);
        jj_consume_token(tSQCL);
{if ("" != null) return new SymbolArray(t1.image, Integer.parseInt(t2.image), type);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tID:{
          t1 = jj_consume_token(tID);
switch (type) {
                                case INT :
                                        {if ("" != null) return new SymbolInt(t1.image);}
                                        break;

                                case CHAR :
                                        {if ("" != null) return new SymbolChar(t1.image);}
                                        break;

                                case BOOL :
                                        {if ("" != null) return new SymbolBool(t1.image);}
                                        break;
                                default: System.err.println("Error: " + type + " no es un tipo v\u00e1lido");
                        }
          break;
          }
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException e) {
Set<Integer> conjSinc = infoParseException(e);
                //añadir tokens al conj de sincronización
                conjSinc.add(tIS);
                conjSinc.add(tPTCL);
                conjSinc.add(tSCOL);
                conjSinc.add(tCOMMA);
                recuperacionPanico(e.currentToken.next, conjSinc);
    }
    throw new Error("Missing return statement in function");
}

//clase_parametros:	<tREF>
//				|	<tVAL>
  static final public Symbol.ParameterClass clase_parametros() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tREF:{
        jj_consume_token(tREF);
{if ("" != null) return Symbol.ParameterClass.REF;}
        break;
        }
      case tVAL:{
        jj_consume_token(tVAL);
{if ("" != null) return Symbol.ParameterClass.VAL;}
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
Set<Integer> conjSinc = infoParseException(e);
                //añadir tokens al conj de sincronización
                conjSinc.add(tIS);
                conjSinc.add(tPTCL);
                conjSinc.add(tSCOL);
                conjSinc.add(tCOMMA);
                recuperacionPanico(e.currentToken.next, conjSinc);
    }
    throw new Error("Missing return statement in function");
}

//instruccion : 	inst_leer <tSCOL>
//				|	inst_saltar_linea <tSCOL> 
//				|	inst_escribir <tSCOL> 
//				|	inst_escribir_linea <tSCOL> 
//				|LOOKAHEAD(2)
//					inst_invoc_proc <tSCOL> 
//				|	inst_asignacion <tSCOL> 
//				|	inst_seleccion
//				|	inst_iteracion
//				|	inst_return <tSCOL>
  static final public Attributes instruccion() throws ParseException {Attributes ret = new Attributes();
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tGET:{
        ret = inst_leer();
        jj_consume_token(tSCOL);
        break;
        }
      case tSKIPL:{
        ret = inst_saltar_linea();
        jj_consume_token(tSCOL);
        break;
        }
      case tPUT:{
        ret = inst_escribir();
        jj_consume_token(tSCOL);
        break;
        }
      case tPUTL:{
        ret = inst_escribir_linea();
        jj_consume_token(tSCOL);
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        if (jj_2_3(2)) {
          ret = inst_invoc_proc();
          jj_consume_token(tSCOL);
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case tID:{
            ret = inst_asignacion();
            jj_consume_token(tSCOL);
            break;
            }
          case tIF:{
            ret = inst_seleccion();
            break;
            }
          case tWHIL:{
            ret = inst_iteracion();
            break;
            }
          case tRET:{
            ret = inst_return();
            jj_consume_token(tSCOL);
            break;
            }
          default:
            jj_la1[15] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } catch (ParseException e) {
Set<Integer> conjSinc = infoParseException(e);
                //añadir tokens al conj de sincronización
                conjSinc.add(tEND);
                conjSinc.add(tSCOL);
                recuperacionPanico(e.currentToken.next, conjSinc);
    }
{if ("" != null) return ret;}
    throw new Error("Missing return statement in function");
}

//inst_leer : <tGET> <tPTOP> asignable ( <tCOMMA> asignable )* <tPTCL>
  static final public Attributes inst_leer() throws ParseException {Attributes toRet = new Attributes();
        Token token;
        Attributes temp = null;
    try {
      jj_consume_token(tGET);
      jj_consume_token(tPTOP);
      temp = asignable();
toRet.block.addBlock(temp.block);
                        toRet.block.addInst(PCodeInstruction.OpCode.RD, 1);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tCOMMA:{
          ;
          break;
          }
        default:
          jj_la1[16] = jj_gen;
          break label_7;
        }
        jj_consume_token(tCOMMA);
        temp = asignable();
toRet.block.addBlock(temp.block);
                                toRet.block.addInst(PCodeInstruction.OpCode.RD, 1);
      }
      jj_consume_token(tPTCL);
    } catch (ParseException e) {
Set<Integer> conjSinc = infoParseException(e);
                //añadir tokens al conj de sincronización
                conjSinc.add(tEND);
                conjSinc.add(tSCOL);
                conjSinc.add(tPTCL);
                conjSinc.add(tCOMMA);
                recuperacionPanico(e.currentToken.next, conjSinc);
    }
toRet.block.encloseXMLTags("get");
                {if ("" != null) return toRet;}
    throw new Error("Missing return statement in function");
}

//Aqui no hay nada que comprobar
//inst_saltar_linea : <tSKIPL> <tPTOP> <tPTCL>
  static final public Attributes inst_saltar_linea() throws ParseException {Attributes toRet = new Attributes();
    try {
      jj_consume_token(tSKIPL);
//Para saltar la línea escribimos CR/LF
                        toRet.block.addComment("CR/LF");
                        toRet.block.addInst(PCodeInstruction.OpCode.STC, 13);
                        toRet.block.addInst(PCodeInstruction.OpCode.WRT, 0);
                        toRet.block.addInst(PCodeInstruction.OpCode.STC, 10);
                        toRet.block.addInst(PCodeInstruction.OpCode.WRT, 0);
      jj_consume_token(tPTOP);
      jj_consume_token(tPTCL);
    } catch (ParseException e) {
Set<Integer> conjSinc = infoParseException(e);
                //añadir tokens al conj de sincronización
                conjSinc.add(tEND);
                conjSinc.add(tSCOL);
                conjSinc.add(tPTCL);
                recuperacionPanico(e.currentToken.next, conjSinc);
    }
toRet.block.encloseXMLTags("put_line");
                {if ("" != null) return toRet;}
    throw new Error("Missing return statement in function");
}

//inst_escribir : <tPUT> <tPTOP> lista_exps <tPTCL>
  static final public Attributes inst_escribir() throws ParseException {ArrayList<Attributes> exps = null;
        Attributes toRet = new Attributes();
        Attributes temp = null;
    try {
      jj_consume_token(tPUT);
      jj_consume_token(tPTOP);
      exps = lista_exps();
for (int i = 0; i < exps.size(); i++) {
                                temp = exps.get(i);
                                CodeBlock put = new CodeBlock();
                                //Si es invocacion a funcion el tipo FUNCTION se cambia por el tipo de retorno
                                if (temp.type == Symbol.Types.FUNCTION) {
                                        temp.type = ((SymbolFunction)temp.simbolo).returnType;
                                }
                                switch (temp.type) {
                                        case INT:
                                                put.addBlock(temp.block);
                                                put.addComment("Escribiendo un tipo " + temp.type);
                                                put.addInst(PCodeInstruction.OpCode.WRT, 1);
                                                break;
                                        case CHAR:
                                                put.addComment("Escribiendo un tipo " + temp.type + " val: "
                                                        + temp.valChar);
                                                put.addBlock(temp.block);
                                                put.addInst(PCodeInstruction.OpCode.WRT, 0);
                                                break;
                                        case BOOL:
                                                put.addComment("Escribiendo un tipo " + temp.type + " val: "
                                                        + temp.valBool);
                                                put.addBlock(temp.block);
                                                put.addInst(PCodeInstruction.OpCode.WRT, 0);
                                                //TODO: esto no funcionará, hay que hacer 2 label y un goto para imprimir los codigos ascii de true y false
                                                break;
                                        case STRING:
                                                put.addComment("Escribiendo un tipo " + temp.type +
                                                        " val: \"" + temp.valString + "\" length: " + temp.valString.length());
                                                put.addBlock(temp.block);
                                                for (int j = temp.valString.length()-1; j>=0 ; j--) {
                                                        put.addInst(PCodeInstruction.OpCode.WRT, 0);
                                                }
                                                break;

                                        default:
                                                System.err.println("No se puede escribir el tipo" + exps.get(i).type);
                                                break;
                                }
                                put.encloseXMLTags("put");
                                toRet.block.addBlock(put);
                        }
      jj_consume_token(tPTCL);
    } catch (ParseException e) {
Set<Integer> conjSinc = infoParseException(e);
                //añadir tokens al conj de sincronización
                conjSinc.add(tEND);
                conjSinc.add(tSCOL);
                conjSinc.add(tPTCL);
                recuperacionPanico(e.currentToken.next, conjSinc);
    }
{if ("" != null) return toRet;}
    throw new Error("Missing return statement in function");
}

//inst_escribir_linea : <tPUTL> <tPTOP> lista_exps <tPTCL>
  static final public Attributes inst_escribir_linea() throws ParseException {ArrayList<Attributes> exps;
        Attributes toRet = new Attributes();
        Attributes temp = null;
    try {
      jj_consume_token(tPUTL);
      jj_consume_token(tPTOP);
      exps = lista_exps();
for (int i = 0; i < exps.size(); i++) {
                                temp = exps.get(i);
                                CodeBlock put = new CodeBlock();
                                //Si es invocacion a funcion el tipo FUNCTION se cambia por el tipo de retorno
                                if (temp.type == Symbol.Types.FUNCTION) {
                                        temp.type = ((SymbolFunction)temp.simbolo).returnType;
                                }
                                switch (temp.type) {
                                        case INT:
                                                put.addBlock(temp.block);
                                                put.addComment("Escribiendo un tipo " + temp.type);
                                                put.addInst(PCodeInstruction.OpCode.WRT, 1);
                                                break;
                                        case CHAR:
                                                put.addComment("Escribiendo un tipo " + temp.type + " val: "
                                                        + temp.valChar);
                                                put.addBlock(temp.block);
                                                put.addInst(PCodeInstruction.OpCode.WRT, 0);
                                                break;
                                        //TODO añadir bool cómo antes
                                        case STRING:
                                                put.addComment("Escribiendo un tipo " + temp.type +
                                                        " val: \"" + temp.valString + "\" length: " + temp.valString.length());
                                                put.addBlock(temp.block);
                                                for (int j = temp.valString.length()-1; j>=0 ; j--) {
                                                        put.addInst(PCodeInstruction.OpCode.WRT, 0);
                                                }
                                                break;
                                        default:
                                                System.err.println("No se puede escribir el tipo" + exps.get(i).type);
                                                break;
                                }
                                put.encloseXMLTags("put");
                                toRet.block.addBlock(put);
                        }
                        //Despues de todo escribimos salto de linea
                        CodeBlock putL = new CodeBlock();
                        //Si no hay ningún put escribimos el put vacío
                        if (temp == null) {
                                putL.encloseXMLTags("put");
                        }
                        putL.addComment("CR/LF");
                        putL.addInst(PCodeInstruction.OpCode.STC, 13);
                        putL.addInst(PCodeInstruction.OpCode.WRT, 0);
                        putL.addInst(PCodeInstruction.OpCode.STC, 10);
                        putL.addInst(PCodeInstruction.OpCode.WRT, 0);
                        putL.encloseXMLTags("put_line");
                        toRet.block.addBlock(putL);
      jj_consume_token(tPTCL);
    } catch (ParseException e) {
Set<Integer> conjSinc = infoParseException(e);
                //añadir tokens al conj de sincronización
                conjSinc.add(tEND);
                conjSinc.add(tSCOL);
                conjSinc.add(tPTCL);
                recuperacionPanico(e.currentToken.next, conjSinc);
    }
{if ("" != null) return toRet;}
    throw new Error("Missing return statement in function");
}

//inst_invoc_proc : <tID> <tPTOP> lista_exps <tPTCL>
  static final public Attributes inst_invoc_proc() throws ParseException {Token funcName;
        Symbol proc;
        ArrayList<Attributes> parList = new ArrayList<Attributes>();
        ArrayList<Symbol> expectedPars;
        SymbolProcedure expFunc = null;
        Attributes toRet = new Attributes();
    try {
      funcName = jj_consume_token(tID);
      jj_consume_token(tPTOP);
      parList = lista_exps();
proc = st.getSymbol(funcName.image);
                        if (proc.type != Symbol.Types.PROCEDURE) {
                                es.deteccion("El s\u00edmbolo utilizado no es un procedimiento", funcName);
                        } else {
                                expFunc = (SymbolProcedure) proc;
                                expectedPars = expFunc.parList;
                                if (expectedPars.size() != parList.size())
                                {
                                        es.deteccion("El n\u00famero de par\u00e1metros no coincide con el esperado", funcName);
                                }
                                for (int i = 0; i< parList.size(); i++) {
                                        Symbol expPar = expectedPars.get(i);
                                        Attributes givenPar = parList.get(i);
                                        if (givenPar.type != expPar.type) {
                                                es.deteccion("El par\u00e1metro " + i + " es " + givenPar.type + " y se esperaba: " + expPar.type, funcName);
                                        } else {
                                                //Si paso por referencia, tiene que ser asignable
                                                if (expPar.parClass == Symbol.ParameterClass.REF && !givenPar.referenciable) {
                                                        es.deteccion("El par\u00e1metro " + i + " no es referenciable", funcName);
                                                }
                                                //Comprobar en caso de ser un vector, que tiene las mismas dimensiones.
                                                if (givenPar.type == Symbol.Types.ARRAY){
                                                        SymbolArray expParArray = (SymbolArray) expPar;
                                                        SymbolArray givenParArray = (SymbolArray) givenPar.simbolo;

                                                        boolean sameDimensions =        expParArray.minInd == givenParArray.minInd &&
                                                                                                        expParArray.maxInd == givenParArray.maxInd;
                                                        if (!sameDimensions) {
                                                                es.deteccion("El par\u00e1metro " + i + " tiene rango: ("+ givenParArray.minInd + "," + givenParArray.maxInd + ")"
                                                                +" y se esperaba: ("+ expParArray.minInd + "," + expParArray.maxInd + ")", funcName);
                                                        }
                                                }
                                        }
                                }

                                //Generación de código
                                for (int i = 0; i < parList.size(); i++) {
                                        Symbol expPar = expectedPars.get(i);
                                        Attributes givenPar = parList.get(i);

                                        if (expPar.parClass == Symbol.ParameterClass.REF
                                                && givenPar.parClass != Symbol.ParameterClass.REF) { //Puede ser VAL o NONE
                                                //Hay que quitar la dereferencia, que es la última instrucción
                                                givenPar.block.delLastInst();
                                        } else if (expPar.parClass == Symbol.ParameterClass.VAL
                                                && givenPar.parClass == Symbol.ParameterClass.REF) {
                                                //Hay que dereferenciar una vez más, para obtener el valor de la variable original
                                                givenPar.block.addInst(PCodeInstruction.OpCode.DRF);
                                        }
                                        givenPar.block.encloseXMLTags(String.format("par\u00e1metro_%d", i+1));
                                        toRet.block.addBlock(givenPar.block);
                                }
                                toRet.block.addOSFInst(cgu.memorySpaces[st.level], st.level - proc.nivel, "L"+proc.dir);
                                toRet.block.encloseXMLTags("llamada_a_funcion_"+proc.name);
                        }
      jj_consume_token(tPTCL);
    } catch (ParseException e) {
Set<Integer> conjSinc = infoParseException(e);
                // añadir tokens al conj de sincronización
                conjSinc.add(tEND);
                conjSinc.add(tSCOL);
                conjSinc.add(tPTCL);
                recuperacionPanico(e.currentToken.next, conjSinc);
    } catch (SymbolNotFoundException e) {
es.deteccion(e, token);
    }
{if ("" != null) return toRet;}
    throw new Error("Missing return statement in function");
}

//inst_invoc_func : <tID> <tPTOP> lista_exps <tPTCL>
  static final public Attributes inst_invoc_func() throws ParseException {Attributes toRet = new Attributes();
        Token funcName;
        Symbol func = null;
        ArrayList<Attributes> parList = new ArrayList<Attributes>();
        ArrayList<Symbol> expectedPars;
        SymbolFunction expFunc = null;
    try {
      funcName = jj_consume_token(tID);
func = st.getSymbol(funcName.image);
                        if (func.type != Symbol.Types.FUNCTION) {
                                es.deteccion(new SymbolNotFoundException(), funcName);
                        }
      jj_consume_token(tPTOP);
      parList = lista_exps();
//Comprobaciones semánticas
                        expFunc = (SymbolFunction) func;
                        expectedPars = expFunc.parList;
                        if (expectedPars.size() != parList.size())
                        {
                                es.deteccion("El n\u00famero de par\u00e1metros no coincide con el esperado", funcName);
                        }
                        for (int i = 0; i< parList.size(); i++) {
                                Symbol expPar = expectedPars.get(i);
                                Attributes givenPar = parList.get(i);
                                if (givenPar.type != expPar.type) {
                                        es.deteccion("El par\u00e1metro " + i + " es " + givenPar.type + " y se esperaba: " + expPar.type, funcName);
                                }
                                //Si paso por referencia, tiene que ser asignable
                                if (expPar.parClass == Symbol.ParameterClass.REF && !givenPar.referenciable) {
                                        es.deteccion("El par\u00e1metro " + i + " no es referenciable", funcName);
                                }
                                //Comprobar en caso de ser un vector, que tiene las mismas dimensiones.
                                if (givenPar.type == Symbol.Types.ARRAY){
                                        SymbolArray expParArray = (SymbolArray) expPar;
                                        SymbolArray givenParArray = (SymbolArray) givenPar.simbolo;

                                        boolean sameDimensions =        expParArray.minInd == givenParArray.minInd &&
                                                                                        expParArray.maxInd == givenParArray.maxInd;
                                        if (!sameDimensions) {
                                                es.deteccion("El par\u00e1metro " + i + " tiene rango: ("+ givenParArray.minInd + "," + givenParArray.maxInd + ")"
                                                +" y se esperaba: ("+ expParArray.minInd + "," + expParArray.maxInd + ")", funcName);
                                        }
                                }
                        }

                        //Generación de código
                        for (int i = 0; i < parList.size(); i++) {
                                Symbol expPar = expectedPars.get(i);
                                Attributes givenPar = parList.get(i);

                                if (expPar.parClass == Symbol.ParameterClass.REF
                                        && givenPar.parClass != Symbol.ParameterClass.REF) { //Puede ser VAL o NONE
                                        //Hay que quitar la dereferencia, que es la última instrucción
                                        givenPar.block.delLastInst();
                                } else if (expPar.parClass == Symbol.ParameterClass.VAL
                                        && givenPar.parClass == Symbol.ParameterClass.REF) {
                                        //Hay que dereferenciar una vez más, para obtener el valor de la variable original
                                        givenPar.block.addInst(PCodeInstruction.OpCode.DRF);
                                }
                                givenPar.block.encloseXMLTags(String.format("par\u00e1metro_%d", i+1));
                                toRet.block.addBlock(givenPar.block);
                        }
                        toRet.block.addOSFInst(cgu.memorySpaces[st.level], st.level - func.nivel, "L"+func.dir);
                        toRet.block.encloseXMLTags("llamada_a_funcion_"+func.name);
      jj_consume_token(tPTCL);
    } catch (ParseException e) {
Set<Integer> conjSinc = infoParseException(e);
                // añadir tokens al conj de sincronización
                conjSinc.add(tEND);
                conjSinc.add(tSCOL);
                conjSinc.add(tPTCL);
                recuperacionPanico(e.currentToken.next, conjSinc);
    } catch (SymbolNotFoundException e) {
es.deteccion(e, token);
    }
toRet.type = expFunc.returnType;
                toRet.referenciable = false;
                toRet.simbolo = func;
                {if ("" != null) return toRet;}
    throw new Error("Missing return statement in function");
}

//inst_asignacion : asignable <tASIG> expresion
  static final public Attributes inst_asignacion() throws ParseException {Attributes asig;
        Attributes expr;
        Attributes toRet = new Attributes();
    try {
      asig = asignable();
toRet.block.addBlock(asig.block);
      jj_consume_token(tASIG);
      expr = expresion();
toRet.block.addBlock(expr.block);
                        //Asignar a la variable asig la expresión expr
                        toRet.block.addInst(PCodeInstruction.OpCode.ASG);

                        if (asig.type == Symbol.Types.ARRAY) {
                                toRet.block.encloseXMLTags(String.format("asignaci\u00f3n_en_componente_de_vector_%s", asig.name));
                        } else {
                                toRet.block.encloseXMLTags(String.format("asignaci\u00f3n_en_variable_simple_%s", asig.name));
                        }
    } catch (ParseException e) {
Set<Integer> conjSinc = infoParseException(e);
                //añadir tokens al conj de sincronización
                conjSinc.add(tEND);
                conjSinc.add(tSCOL);
                recuperacionPanico(e.currentToken.next, conjSinc);
    }
{if ("" != null) return toRet;}
    throw new Error("Missing return statement in function");
}

//inst_seleccion :	<tIF> expresion <tTHEN> ( instruccion )* resto_if <tEND>
  static final public Attributes inst_seleccion() throws ParseException {boolean hayReturn1 = false;
        boolean hayReturn2 = true;
        boolean warning = false;        //Si no hay ningún return no hay que dar warning
        Token tokenIf;
        Attributes attrIf = null;
        Attributes attrThen = new Attributes();
        Attributes attrInst = null;
        Attributes attrElse = null;
        Attributes toRet = new Attributes();
        String labelFinIf = "";
        String labelFinElse = "";
        boolean aux = false;
    try {
      tokenIf = jj_consume_token(tIF);
      attrIf = expresion();
if (attrIf.type != Symbol.Types.BOOL)
                                es.deteccion("El tipo de la expresion tiene que ser booleano", token);

                        attrIf.block.encloseXMLTags("condici\u00f3n");
                        toRet.block.addBlock(attrIf.block);
                        labelFinIf = cgu.newLabel();
                        //De momento no sabemos si hay else,
                        //así que en caso de no haberlo se salta al fin del if
                        labelFinElse = labelFinIf;
                        toRet.block.addInst(PCodeInstruction.OpCode.JMF, labelFinIf);
      jj_consume_token(tTHEN);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tRET:
        case tIF:
        case tWHIL:
        case tGET:
        case tSKIPL:
        case tPUT:
        case tPUTL:
        case tID:{
          ;
          break;
          }
        default:
          jj_la1[17] = jj_gen;
          break label_8;
        }
        attrInst = instruccion();
aux = attrInst.hayReturn;
                                hayReturn1 |= aux;
                                //En caso de que solo haya if, y haya un return, dar warning
                                warning = hayReturn1;

                                //Añadir la instrucción al bloque de instrucciones del then
                                attrThen.block.addBlock(attrInst.block);
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tELSE:{
        attrElse = resto_if();
//Generar la etiqueta de fin de else porque hay else
                                labelFinElse = cgu.newLabel();

                                //Incluir el final del bloque then tras obtener la etiqueta de fin de else
                                attrThen.block.addInst(PCodeInstruction.OpCode.JMP, labelFinElse);
                                attrThen.block.encloseXMLTags("then");
                                toRet.block.addBlock(attrThen.block);

                                //Hay que poner la etiqueta de fin de if lo primero
                                CodeBlock swapBlock = new CodeBlock();
                                swapBlock.addLabel(labelFinIf);
                                swapBlock.addBlock(attrElse.block);
                                attrElse.block = swapBlock;
                                attrElse.block.encloseXMLTags("else");
                                toRet.block.addBlock(attrElse.block);

                                hayReturn2 = attrElse.hayReturn;
                                //Hay que dar warning si solo hay return en uno de los dos casos
                                warning = (hayReturn1 && !hayReturn2) || (!hayReturn1 && hayReturn2);
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        ;
      }
      jj_consume_token(tEND);
if (attrElse != null) {
                                //Añadir etiqueta de fin de else
                                toRet.block.addLabel(labelFinElse);
                        } else {
                                //Incluir el final del bloque then sin añadir el salto a la etiqueta de fin de else
                                attrThen.block.encloseXMLTags("then");
                                toRet.block.addBlock(attrThen.block);
                                //Incluir el labelFinElse porque no se ha añadido al principio del else
                                toRet.block.addLabel(labelFinIf);
                        }

                        toRet.block.encloseXMLTags("if-then");

                        if (warning) {
                                es.warning("Es posible que el return no se ejecute", tokenIf);
                        }
                        toRet.hayReturn =  hayReturn1 && hayReturn2;
                        {if ("" != null) return toRet;}
    } catch (ParseException e) {
Set<Integer> conjSinc = infoParseException(e);
                //añadir tokens al conj de sincronización
                conjSinc.add(tEND);
                conjSinc.add(tSCOL);
                recuperacionPanico(e.currentToken.next, conjSinc);
    }
    throw new Error("Missing return statement in function");
}

//resto_if : <tELSE> ( instruccion )*
  static final public Attributes resto_if() throws ParseException {boolean hayReturn = false;
        boolean aux = false;
        Attributes toRet = new Attributes();
        Attributes temp = null;
    try {
      jj_consume_token(tELSE);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tRET:
        case tIF:
        case tWHIL:
        case tGET:
        case tSKIPL:
        case tPUT:
        case tPUTL:
        case tID:{
          ;
          break;
          }
        default:
          jj_la1[19] = jj_gen;
          break label_9;
        }
        temp = instruccion();
toRet.block.addBlock(temp.block);
                                aux = temp.hayReturn;
                                hayReturn |= aux;
      }
    } catch (ParseException e) {
Set<Integer> conjSinc = infoParseException(e);
                //añadir tokens al conj de sincronización
                conjSinc.add(tEND);
                conjSinc.add(tSCOL);
                recuperacionPanico(e.currentToken.next, conjSinc);
    }
toRet.hayReturn = hayReturn;
                {if ("" != null) return toRet;}
    throw new Error("Missing return statement in function");
}

//asignable : LOOKAHEAD(2)
//				<tID> <tSQOP> expresion <tSQCL>
//			|	<tID>
//Un asignable es el nombre de una variable escalar o de un vector con un indice (que puede ser una expresion)
//
//Desde asignable tenemos que comprobar que el nombre existe, así que no haga falta mirarlo en los varios lugares donde llamamos esta funcion
  static final public 
Attributes asignable() throws ParseException {Token token;
        Attributes attr;
        Attributes toRet = new Attributes();
        Symbol s = null;
    try {
      if (jj_2_4(3)) {
        token = jj_consume_token(tID);
if (!st.containsSymbol(token.image)) {
                                es.deteccion(new SymbolNotFoundException(), token);
                        } else {
                                s = st.getSymbol(token.image);
                                toRet.type = s.type;
                                toRet.name = s.name;
                                toRet.simbolo = s;
                        }
        jj_consume_token(tSQOP);
        attr = expresion();
if (attr.type != Symbol.Types.INT) {
                                es.deteccion("Tipo de indice incorrecto, esperaba un entero", token);
                        } else {
                                //Código que da el resultado de la expresión
                                toRet.block.addBlock(attr.block);

                                if (genErrEjec) {
                                        //Para acceder a componentes específicas de vector
                                        SymbolArray sArr = (SymbolArray) s;
                                        String lblIniError = cgu.newLabel();
                                        String lblFinError = cgu.newLabel();
                                        String error = String.format("Error: \u00cdndice fuera de l\u00edmites para el vector \"%s\".", s.name);

                                        //Escribir código para comprobar si el índice está dentro de rango
                                        toRet.block.addComment(String.format("Comprobando si el \u00edndice es v\u00e1lido para el vector \"%s\"", s.name));

                                        //Duplicamos el resultado para no perderlo con las comprobaciones
                                        toRet.block.addInst(PCodeInstruction.OpCode.DUP);
                                        toRet.block.addInst(PCodeInstruction.OpCode.STC, sArr.minInd);
                                        toRet.block.addInst(PCodeInstruction.OpCode.GTE);
                                        toRet.block.addInst(PCodeInstruction.OpCode.JMF, lblIniError);
                                        toRet.block.addInst(PCodeInstruction.OpCode.DUP);
                                        toRet.block.addInst(PCodeInstruction.OpCode.STC, sArr.maxInd);
                                        toRet.block.addInst(PCodeInstruction.OpCode.LTE);
                                        toRet.block.addInst(PCodeInstruction.OpCode.JMT, lblFinError);

                                        //Añadir etiqueta de inicio de error
                                        toRet.block.addLabel(lblIniError);
                                        toRet.block.addComment(String.format("Escribiendo: \"%s\"", error));

                                        //En caso de que no hayamos saltado más adelante, aquí mostramos por pantalla el error
                                        for (int i = 0; i < error.length(); i++) {
                                                toRet.block.addInst(PCodeInstruction.OpCode.STC, (int) error.charAt(i));
                                                toRet.block.addInst(PCodeInstruction.OpCode.WRT, 0);
                                        }
                                        //Añadir salto de línea
                                        toRet.block.addComment("CR/LF");
                                        toRet.block.addInst(PCodeInstruction.OpCode.STC, 13);
                                        toRet.block.addInst(PCodeInstruction.OpCode.WRT, 0);
                                        toRet.block.addInst(PCodeInstruction.OpCode.STC, 10);
                                        toRet.block.addInst(PCodeInstruction.OpCode.WRT, 0);

                                        //Salir del programa a causa del error
                                        toRet.block.addInst(PCodeInstruction.OpCode.LVP);

                                        //Añadir etiqueta de fin de error
                                        toRet.block.addLabel(lblFinError);
                                }

                                toRet.block.addComment(String.format("Direcci\u00f3n inicial de vector \"%s\".", s.name));
                                toRet.block.addInst(PCodeInstruction.OpCode.SRF, st.level - s.nivel , (int)s.dir);

                                //Hay que dereferenciar la dirección de la referencia,
                                //para obtener la dirección de la variable referenciada
                                if (s.parClass == Symbol.ParameterClass.REF) {
                                        toRet.block.addInst(PCodeInstruction.OpCode.DRF);
                                }
                                //Ahora que hemos obtenido la direccion de vett[0]
                                //Se le suma a la dirección inicial, el índice
                                toRet.block.addInst(PCodeInstruction.OpCode.PLUS);
                                //Este hay que quitarlo porquè ya hemos hecho un DRF, y nos hace falta
                                //La direccion de v[indice] para asignarle lo que sea
                                //toRet.block.addInst(PCodeInstruction.OpCode.DRF);
                        }
        jj_consume_token(tSQCL);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tID:{
          token = jj_consume_token(tID);
if (!st.containsSymbol(token.image)) {
                                es.deteccion(new SymbolNotFoundException(), token);
                        } else {
                                s = st.getSymbol(token.image);
                                toRet.type = s.type;
                                toRet.name = s.name;
                                toRet.simbolo = s;

                                toRet.block.addComment(String.format("Obteniendo variable simple/par\u00e1metro \"%s\".", toRet.name));
                                toRet.block.addInst(PCodeInstruction.OpCode.SRF, st.level - s.nivel , (int)s.dir);
                                //Hay que dereferenciar la dirección de la referencia,
                                //para obtener la dirección de la variable referenciada
                                if (s.parClass == Symbol.ParameterClass.REF) {
                                        toRet.block.addInst(PCodeInstruction.OpCode.DRF);
                                }
                        }
          break;
          }
        default:
          jj_la1[20] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException e) {
Set<Integer> conjSinc = infoParseException(e);
                //añadir tokens al conj de sincronización
                conjSinc.add(tEND);
                conjSinc.add(tSCOL);
                conjSinc.add(tPTCL);
                conjSinc.add(tCOMMA);
                recuperacionPanico(e.currentToken.next, conjSinc);
    }
{if ("" != null) return toRet;}
    throw new Error("Missing return statement in function");
}

//inst_iteracion : <tWHIL> expresion <tDO> ( instruccion )* <tEND>
  static final public Attributes inst_iteracion() throws ParseException {boolean hayReturn = false;
        boolean aux = false;
        Attributes toRet = new Attributes();
        Attributes attrCond = null;
        Attributes attrDo = new Attributes();
        Attributes attrInst = null;
        String labelInicio = cgu.newLabel();
        String labelFin = cgu.newLabel();
    try {
      jj_consume_token(tWHIL);
      attrCond = expresion();
toRet.block.addLabel(labelInicio);

                        attrCond.block.encloseXMLTags("condici\u00f3n");
                        toRet.block.addBlock(attrCond.block);
                        toRet.block.addInst(PCodeInstruction.OpCode.JMF, labelFin);
      jj_consume_token(tDO);
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tRET:
        case tIF:
        case tWHIL:
        case tGET:
        case tSKIPL:
        case tPUT:
        case tPUTL:
        case tID:{
          ;
          break;
          }
        default:
          jj_la1[21] = jj_gen;
          break label_10;
        }
        attrInst = instruccion();
aux = attrInst.hayReturn;
                                hayReturn |= aux;

                                //Añadir la instrucción al bloque de instrucciones del do
                                attrDo.block.addBlock(attrInst.block);
      }
      jj_consume_token(tEND);
//Finalizar el bloque de instrucciones del while
                        attrDo.block.encloseXMLTags("bloque_instrucciones_while");
                        toRet.block.addBlock(attrDo.block);
                        //Finalizar el while
                        toRet.block.addInst(PCodeInstruction.OpCode.JMP, labelInicio);
                        toRet.block.addLabel(labelFin);
                        toRet.block.encloseXMLTags("while");
    } catch (ParseException e) {
Set<Integer> conjSinc = infoParseException(e);
                //añadir tokens al conj de sincronización
                conjSinc.add(tEND);
                conjSinc.add(tSCOL);
                recuperacionPanico(e.currentToken.next, conjSinc);
    }
toRet.hayReturn = hayReturn;
                {if ("" != null) return toRet;}
    throw new Error("Missing return statement in function");
}

//inst_return : <tRET> expresion
  static final public Attributes inst_return() throws ParseException {Attributes toRet = new Attributes();
        Attributes expr;
    try {
      jj_consume_token(tRET);
      expr = expresion();
toRet.block.addBlock(expr.block);
    } catch (ParseException e) {
Set<Integer> conjSinc = infoParseException(e);
                //añadir tokens al conj de sincronización
                conjSinc.add(tEND);
                conjSinc.add(tSCOL);
                recuperacionPanico(e.currentToken.next, conjSinc);
    }
toRet.block.addInst(PCodeInstruction.OpCode.CSF);
                toRet.block.encloseXMLTags("return");
                toRet.hayReturn = true;
                {if ("" != null) return toRet;}
    throw new Error("Missing return statement in function");
}

//lista_exps : ( expresion ( <tCOMMA> expresion )* )?
  static final public ArrayList<Attributes> lista_exps() throws ParseException {ArrayList<Attributes> parList = new ArrayList<Attributes>();
        Attributes attr;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tCHAR:
      case tSTRING:
      case tNUM:
      case tNOT:
      case tPTOP:
      case tADD:
      case tSUB:
      case tTRUE:
      case tFALSE:
      case tATOI:
      case tITOA:
      case tID:{
        attr = expresion();
parList.add(attr);
        label_11:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case tCOMMA:{
            ;
            break;
            }
          default:
            jj_la1[22] = jj_gen;
            break label_11;
          }
          jj_consume_token(tCOMMA);
          attr = expresion();
parList.add(attr);
        }
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        ;
      }
    } catch (ParseException e) {
Set<Integer> conjSinc = infoParseException(e);
                //añadir tokens al conj de sincronización
                conjSinc.add(tEND);
                conjSinc.add(tSCOL);
                conjSinc.add(tCOMMA);
                recuperacionPanico(e.currentToken.next, conjSinc);
    }
{if ("" != null) return parList;}
    throw new Error("Missing return statement in function");
}

//expresion : expresion_simple ( operador_relacional expresion_simple )?
  static final public Attributes expresion() throws ParseException {Attributes attrExpresion1;
        Symbol.Types tipo_operador = null;
        Attributes attrExpresion2 = null;
        Attributes retAttribute = new Attributes();
        retAttribute.type = Symbol.Types.BOOL;
        retAttribute.referenciable = false;
        PCodeInstruction.OpCode opRel;
    try {
      attrExpresion1 = expresion_simple();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tGT:
      case tLT:
      case tEQ:
      case tGEQ:
      case tLEQ:
      case tDIFF:{
        opRel = operador_relacional();
        attrExpresion2 = expresion_simple();
if (attrExpresion2.type != attrExpresion1.type) {
                                        es.deteccion("Tipos incoherentes entre variables", token);
                                } else {
                                        //Añadir código para la generación de la comparación
                                        retAttribute.block.addBlock(attrExpresion1.block);
                                        retAttribute.block.addBlock(attrExpresion2.block);
                                        retAttribute.block.addInst(opRel);
                                }
                                {if ("" != null) return retAttribute;} //Si hay operador relacional devuelve un Attributes booleano

        break;
        }
      default:
        jj_la1[24] = jj_gen;
        ;
      }
{if ("" != null) return attrExpresion1;} //Si no hay operador relacional

    } catch (ParseException e) {
Set<Integer> conjSinc = infoParseException(e);
                conjSinc.add(tEND);
                conjSinc.add(tSCOL);
                conjSinc.add(tPTCL);
                conjSinc.add(tCOMMA);
                recuperacionPanico(e.currentToken.next, conjSinc);
    }
    throw new Error("Missing return statement in function");
}

//operador_relacional :	<tEQ> =
//					|	<tLT> <
//					|	<tGT> >
//					|	<tLEQ> <=
//					|	<tGEQ> >=
//					|	<tDIFF> <>
  static final public PCodeInstruction.OpCode operador_relacional() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tEQ:{
        jj_consume_token(tEQ);
{if ("" != null) return PCodeInstruction.OpCode.EQ;}
        break;
        }
      case tLT:{
        jj_consume_token(tLT);
{if ("" != null) return PCodeInstruction.OpCode.LT;}
        break;
        }
      case tGT:{
        jj_consume_token(tGT);
{if ("" != null) return PCodeInstruction.OpCode.GT;}
        break;
        }
      case tLEQ:{
        jj_consume_token(tLEQ);
{if ("" != null) return PCodeInstruction.OpCode.LTE;}
        break;
        }
      case tGEQ:{
        jj_consume_token(tGEQ);
{if ("" != null) return PCodeInstruction.OpCode.GTE;}
        break;
        }
      case tDIFF:{
        jj_consume_token(tDIFF);
{if ("" != null) return PCodeInstruction.OpCode.NEQ;}
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
Set<Integer> conjSinc = infoParseException(e);
                //añadir tokens al conj de sincronización
                conjSinc.add(tEND);
                conjSinc.add(tSCOL);
                conjSinc.add(tPTCL);
                conjSinc.add(tCOMMA);
                recuperacionPanico(e.currentToken.next, conjSinc);
    }
    throw new Error("Missing return statement in function");
}

//expresion_simple : ( <tADD> | <tSUB> )? termino ( operador_aditivo termino )*
  static final public Attributes expresion_simple() throws ParseException {Attributes a = new Attributes();
        Attributes a2 = new Attributes();
        Token t;
        PCodeInstruction.OpCode opSig = null;
        PCodeInstruction.OpCode opAd;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tADD:
      case tSUB:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tADD:{
          jj_consume_token(tADD);
opSig = PCodeInstruction.OpCode.PLUS;
          break;
          }
        case tSUB:{
          jj_consume_token(tSUB);
opSig = PCodeInstruction.OpCode.SBT;
          break;
          }
        default:
          jj_la1[26] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[27] = jj_gen;
        ;
      }
      a = termino();
if (opSig != null) {
                                if (a.type != Symbol.Types.INT) {
                                        es.deteccion("La variable despues de +/- tiene que ser entera", token);
                                }
                                a.referenciable = false;
                        }
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tOR:
        case tADD:
        case tSUB:{
          ;
          break;
          }
        default:
          jj_la1[28] = jj_gen;
          break label_12;
        }
        opAd = operador_aditivo();
if ((opAd == PCodeInstruction.OpCode.OR)
                                        && (a.type != Symbol.Types.BOOL)) {
                                        es.deteccion("Los tipos del operando y el termino no coinciden: "
                                                + a.type + " vs BOOL", token);
                                }
                                if (a.type == Symbol.Types.ARRAY ) {
                                        es.deteccion("Utilizado operator aditivo con vector", token);
                                }
                                a.referenciable = false;

                                //Si es una operación de resultado booleano, actualizar el tipo resultado
                                if (opAd == PCodeInstruction.OpCode.OR) {
                                        a.type = Symbol.Types.BOOL;
                                }
        a2 = termino();
if (a2.type != a.type) {
                                        es.deteccion("Los tipos de los terminos de la operaci\u00f3n aditiva no coinciden "
                                                + a.type + " vs " + a2.type, token);
                                }
                                if (a2.type == Symbol.Types.ARRAY ) {
                                                es.deteccion("Suma entre vector y otra variable", token);
                                }
                                a.referenciable = false;

                                //Añadir código de la adición de lo apilado anteriormente con el siguiente termino
                                a.block.addBlock(a2.block);
                                a.block.addInst(opAd);
      }
    } catch (ParseException e) {
Set<Integer> conjSinc = infoParseException(e);
                //añadir tokens al conj de sincronización
                conjSinc.add(tEND);
                conjSinc.add(tSCOL);
                conjSinc.add(tPTCL);
                conjSinc.add(tCOMMA);
                recuperacionPanico(e.currentToken.next, conjSinc);
    }
if (opSig != null) {
                        a.block.addInst(opSig);
                }
                {if ("" != null) return a;}
    throw new Error("Missing return statement in function");
}

//operador_aditivo :	<tADD>
//					|	<tSUB>
//					|	<tOR>
  static final public PCodeInstruction.OpCode operador_aditivo() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tADD:{
        jj_consume_token(tADD);
{if ("" != null) return PCodeInstruction.OpCode.PLUS;}
        break;
        }
      case tSUB:{
        jj_consume_token(tSUB);
{if ("" != null) return PCodeInstruction.OpCode.SBT;}
        break;
        }
      case tOR:{
        jj_consume_token(tOR);
{if ("" != null) return PCodeInstruction.OpCode.OR;}
        break;
        }
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
Set<Integer> conjSinc = infoParseException(e);
                //añadir tokens al conj de sincronización
                conjSinc.add(tEND);
                conjSinc.add(tSCOL);
                conjSinc.add(tPTCL);
                conjSinc.add(tCOMMA);
                recuperacionPanico(e.currentToken.next, conjSinc);
    }
    throw new Error("Missing return statement in function");
}

//termino : factor ( operador_multiplicativo factor )*
  static final public Attributes termino() throws ParseException {Attributes a = null;
        PCodeInstruction.OpCode opMul;
        Attributes a2;
    try {
      a = factor();
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tAND:
        case tMUL:
        case tDIV:
        case tMOD:{
          ;
          break;
          }
        default:
          jj_la1[30] = jj_gen;
          break label_13;
        }
        opMul = operador_multiplicativo();
if ((opMul == PCodeInstruction.OpCode.AND)
                                        && (a.type != Symbol.Types.BOOL)) {
                                        es.deteccion("Los tipos del operando y el termino no coinciden: "
                                                + a.type + " vs BOOL", token);
                                }
        a2 = factor();
if (a2.type != a.type) {
                                        es.deteccion("Los tipos de los operandos no coinciden: " + a.type + " vs " + a2.type, token);
                                }
                                a.referenciable = false;

                                //Si es una operación de resultado booleano, actualizar el tipo resultado
                                if (opMul == PCodeInstruction.OpCode.AND) {
                                        a.type = Symbol.Types.BOOL;
                                }

                                //Añadir código de la multiplicación de lo apilado anteriormente con el siguiente termino
                                a.block.addBlock(a2.block);
                                a.block.addInst(opMul);
      }
    } catch (ParseException e) {
Set<Integer> conjSinc = infoParseException(e);
                //añadir tokens al conj de sincronización
                conjSinc.add(tEND);
                conjSinc.add(tSCOL);
                conjSinc.add(tPTCL);
                conjSinc.add(tCOMMA);
                recuperacionPanico(e.currentToken.next, conjSinc);
    }
{if ("" != null) return a;}
    throw new Error("Missing return statement in function");
}

//operador_multiplicativo :	<tMUL>
//						|	<tMOD>
//						|	<tDIV>
//						|	<tAND>
  static final public PCodeInstruction.OpCode operador_multiplicativo() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tMUL:{
        jj_consume_token(tMUL);
{if ("" != null) return PCodeInstruction.OpCode.TMS;}
        break;
        }
      case tMOD:{
        jj_consume_token(tMOD);
{if ("" != null) return PCodeInstruction.OpCode.MOD;}
        break;
        }
      case tDIV:{
        jj_consume_token(tDIV);
{if ("" != null) return PCodeInstruction.OpCode.DIV;}
        break;
        }
      case tAND:{
        jj_consume_token(tAND);
{if ("" != null) return PCodeInstruction.OpCode.AND;}
        break;
        }
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
Set<Integer> conjSinc = infoParseException(e);
                //añadir tokens al conj de sincronización
                conjSinc.add(tEND);
                conjSinc.add(tSCOL);
                conjSinc.add(tPTCL);
                conjSinc.add(tCOMMA);
                recuperacionPanico(e.currentToken.next, conjSinc);
    }
    throw new Error("Missing return statement in function");
}

//factor :	<tNOT> factor
//		|	<tPTOP> expresion <tPTCL>
//		|	<tINT2CHAR> <tPTOP> expresion <tPTCL>
//		|	<tCHAR2INT> <tPTOP> expresion <tPTCL>
//		|	LOOKAHEAD(2)  <tID> <tPTOP> lista_exps <tPTCL> Esta es una llamada a funcion
//		|	LOOKAHEAD(2)  <tID> <tSQOP> expresion <tSQCL>  componente vector
//		|	<tID>
//		|	<tNUM>
//		|	<tCHAR>
//		|	<tSTRING>
//		|	<tTRUE>
//		|	<tFALSE>
  static final public Attributes factor() throws ParseException {Attributes a = new Attributes();
        Attributes temp;
        Token t;
        Symbol s = null;
        Token tempTok;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tNOT:{
        jj_consume_token(tNOT);
        a = factor();
if (a.type != Symbol.Types.BOOL) {
                                es.deteccion("El tipo de la expresi\u00f3n tiene que ser booleano", token);
                        }
                        a.referenciable = false;
                        a.block.addInst(PCodeInstruction.OpCode.NGB);
        break;
        }
      case tPTOP:{
        jj_consume_token(tPTOP);
        a = expresion();
        jj_consume_token(tPTCL);
        break;
        }
      case tITOA:{
        jj_consume_token(tITOA);
        jj_consume_token(tPTOP);
        //A int to ascii tienes que pasarle un int
                        temp = expresion();
if (temp.type != Symbol.Types.INT) {
                                es.deteccion("El tipo de la expresi\u00f3n tiene que ser entero", token);
                        }
                        a.type = Symbol.Types.CHAR;
                        a.referenciable = false;
        jj_consume_token(tPTCL);
        break;
        }
      case tATOI:{
        jj_consume_token(tATOI);
        jj_consume_token(tPTOP);
        //A ascii to int tienes que pasarle un char
                        temp = expresion();
if (temp.type != Symbol.Types.CHAR) {
                                es.deteccion("El tipo de la expresi\u00f3n tiene que ser caracter", token);
                        }
                        a.type = Symbol.Types.INT;
                        a.referenciable = false;
        jj_consume_token(tPTCL);
        break;
        }
      default:
        jj_la1[32] = jj_gen;
        if (jj_2_5(2)) {
          a = inst_invoc_func();
        } else if (jj_2_6(2)) {
          t = jj_consume_token(tID);
if (!st.containsSymbol(t.image)) {
                                es.deteccion(new SymbolNotFoundException(), t);
                        } else {
                                s = st.getSymbol(t.image);
                                if (s.type != Symbol.Types.ARRAY) {
                                        es.deteccion(t.image + " no es identificador de vector, es de tipo: " + s.type, t);
                                }
                                SymbolArray sArr = (SymbolArray) s;
                                a.type = sArr.baseType;
                                a.referenciable = true;
                                a.name = t.image;
                                a.simbolo = s;
                        }
          jj_consume_token(tSQOP);
          temp = expresion();
if (temp.type != Symbol.Types.INT) {
                                es.deteccion("El indice de elemento de vector tiene que ser entero", t);
                        }
                        //Código que da el resultado de la expresión
                        a.block.addBlock(temp.block);

                        if (genErrEjec) {
                                //Para acceder a componentes específicas de vector
                                SymbolArray sArr = (SymbolArray) a.simbolo;
                                String lblIniError = cgu.newLabel();
                                String lblFinError = cgu.newLabel();
                                String error = String.format("Error: \u00cdndice fuera de l\u00edmites para el vector \"%s\".", a.name);

                                //Escribir código para comprobar si el índice está dentro de rango
                                a.block.addComment(String.format("Comprobando si el \u00edndice es v\u00e1lido para el vector \"%s\"", a.name));

                                //Duplicamos el resultado para no perderlo con las comprobaciones
                                a.block.addInst(PCodeInstruction.OpCode.DUP);
                                a.block.addInst(PCodeInstruction.OpCode.STC, sArr.minInd);
                                a.block.addInst(PCodeInstruction.OpCode.GTE);
                                a.block.addInst(PCodeInstruction.OpCode.JMF, lblIniError);
                                a.block.addInst(PCodeInstruction.OpCode.DUP);
                                a.block.addInst(PCodeInstruction.OpCode.STC, sArr.maxInd);
                                a.block.addInst(PCodeInstruction.OpCode.LTE);
                                a.block.addInst(PCodeInstruction.OpCode.JMT, lblFinError);

                                //Añadir etiqueta de inicio de error
                                a.block.addLabel(lblIniError);
                                a.block.addComment(String.format("Escribiendo: \"%s\"", error));

                                //En caso de que no hayamos saltado más adelante, aquí mostramos por pantalla el error
                                for (int i = 0; i < error.length(); i++) {
                                        a.block.addInst(PCodeInstruction.OpCode.STC, (int) error.charAt(i));
                                        a.block.addInst(PCodeInstruction.OpCode.WRT, 0);
                                }
                                //Añadir salto de línea
                                a.block.addComment("CR/LF");
                                a.block.addInst(PCodeInstruction.OpCode.STC, 13);
                                a.block.addInst(PCodeInstruction.OpCode.WRT, 0);
                                a.block.addInst(PCodeInstruction.OpCode.STC, 10);
                                a.block.addInst(PCodeInstruction.OpCode.WRT, 0);

                                //Salir del programa a causa del error
                                a.block.addInst(PCodeInstruction.OpCode.LVP);

                                //Añadir etiqueta de fin de error
                                a.block.addLabel(lblFinError);
                        }

                        a.block.addComment(String.format("Direcci\u00f3n inicial de vector \"%s\".", a.name));
                        a.block.addInst(PCodeInstruction.OpCode.SRF, st.level - a.simbolo.nivel , (int)a.simbolo.dir);
                        //Se el array que estamos utilizando es por referencia, me hace falta este
                        if (s.parClass == Symbol.ParameterClass.REF) {
                                a.block.addInst(PCodeInstruction.OpCode.DRF);
                        }
                        //Se le suma a la dirección inicial, el índice
                        a.block.addInst(PCodeInstruction.OpCode.PLUS);
                        //Este segundo DRF se come la direccion y pone el valor
                        a.block.addInst(PCodeInstruction.OpCode.DRF);

                        a.block.encloseXMLTags(String.format("componente_de_vector_%s", a.name));
          jj_consume_token(tSQCL);
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case tID:{
            t = jj_consume_token(tID);
if (!st.containsSymbol(t.image)) {
                                es.deteccion(new SymbolNotFoundException(), t);
                        } else {
                                s = st.getSymbol(t.image);
                                if (s.type == Symbol.Types.FUNCTION || s.type == Symbol.Types.PROCEDURE) {
                                        es.deteccion(t.image + " no puede ser utilizado como variable simple", t);
                                }
                                a.type = s.type;
                                a.referenciable = true;
                                a.name = t.image;
                                a.simbolo = s;
                                a.block.addComment(String.format("Variable simple/par\u00e1metro \"%s\".", a.name));
                                a.block.addInst(PCodeInstruction.OpCode.SRF, st.level - s.nivel , (int)s.dir);
                                a.block.addInst(PCodeInstruction.OpCode.DRF);

                                //Suponemos que queremos siempre el valor de la variable.
                                //En caso de no ser lo que queramos podemos eliminar el DRF más adelante. 
                                //Para ello:
                                //si es una referencia, hay que dereferenciar la dirección de
                                //la variable referenciada, para obtener el valor de la variable original.
                                if (s.parClass == Symbol.ParameterClass.REF) {
                                        a.block.addInst(PCodeInstruction.OpCode.DRF);
                                }
                        }
            break;
            }
          case tNUM:{
            tempTok = jj_consume_token(tNUM);
a.type = Symbol.Types.INT;
                        a.referenciable = false;
                        a.valInt = Integer.parseInt(tempTok.image);
                        a.block.addInst(PCodeInstruction.OpCode.STC, (int) a.valInt);
            break;
            }
          case tCHAR:{
            tempTok = jj_consume_token(tCHAR);
a.type = Symbol.Types.CHAR;
                        a.referenciable = false;
                        a.valChar = tempTok.image.charAt(1);
                        a.block.addInst(PCodeInstruction.OpCode.STC, (int) a.valChar);
            break;
            }
          case tSTRING:{
            tempTok = jj_consume_token(tSTRING);
a.type = Symbol.Types.STRING;
                        a.referenciable = false;
                        a.valString = tempTok.image.substring(1, tempTok.image.length()-1);
                        for (int i = a.valString.length()-1; i>=0 ;i--) {
                                a.block.addInst(PCodeInstruction.OpCode.STC, (int) a.valString.charAt(i));
                        }
            break;
            }
          case tTRUE:{
            jj_consume_token(tTRUE);
a.type = Symbol.Types.BOOL;
                        a.referenciable = false;
                        a.valBool = true;
                        a.block.addInst(PCodeInstruction.OpCode.STC, 1);
            break;
            }
          case tFALSE:{
            jj_consume_token(tFALSE);
a.type = Symbol.Types.BOOL;
                        a.referenciable = false;
                        a.valBool = false;
                        a.block.addInst(PCodeInstruction.OpCode.STC, 0);
            break;
            }
          default:
            jj_la1[33] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } catch (ParseException e) {
Set<Integer> conjSinc = infoParseException(e);
                //añadir tokens al conj de sincronización
                conjSinc.add(tEND);
                conjSinc.add(tSCOL);
                conjSinc.add(tPTCL);
                conjSinc.add(tCOMMA);
                conjSinc.add(tSQCL);
                recuperacionPanico(e.currentToken.next, conjSinc);
    }
{if ("" != null) return a;}
    throw new Error("Missing return statement in function");
}

//------------------------------------ 
//Informa sobre la excepción, y calcula el conjunto de tokens esperados Set infoParseException(ParseException e) {
  static Set<Integer> infoParseException(ParseException e) throws ParseException {Set<Integer> esperados = new HashSet<Integer>();
    System.err.println("ERROR_SINT: ('" + e.currentToken.next.image + ", " + e.currentToken.next.beginLine
        + "," + e.currentToken.next.beginColumn + ")");
    System.err.println("Se esperaba uno de los siguientes tokens:");
    for(int i = 0; i<e.expectedTokenSequences.length; i++) {
        esperados.add(e.expectedTokenSequences[i][0]);
        System.err.println("\t" + adac_4Constants.tokenImage[e.expectedTokenSequences[i][0]]);
    }
    return esperados;
  }

//--------- 
  static void recuperacionPanico(Token tInesperado, Set <Integer> conjSinc) throws ParseException {// System.err.println(sep); 
    System.err.println("----> Recupero en modo p\u00e1nico: "
        + "\n----> saltando todo hasta token de conjunto de sincronizaci\u00f3n");
    System.err.println("Lexema inesperado: " + tInesperado.image);
    Token t = getNextToken();
    while (!conjSinc.contains(t. kind) && t.kind != EOF){
        System.err.println("Descartando token ("
        + adac_4Constants.tokenImage[t.kind]
        + "," + t.image + ")"); t = getNextToken();
    }
  }

  static private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_4()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_5()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_6()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_3R_factor_2238_17_27()
 {
    if (jj_scan_token(tID)) return true;
    return false;
  }

  static private boolean jj_3R_factor_2142_17_26()
 {
    if (jj_scan_token(tATOI)) return true;
    return false;
  }

  static private boolean jj_3_4()
 {
    if (jj_scan_token(tID)) return true;
    if (jj_scan_token(tSQOP)) return true;
    if (jj_3R_expresion_1827_9_15()) return true;
    return false;
  }

  static private boolean jj_3R_expresion_simple_1913_9_17()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_expresion_simple_1915_25_18()) jj_scanpos = xsp;
    if (jj_3R_termino_2021_9_19()) return true;
    return false;
  }

  static private boolean jj_3R_factor_2279_17_30()
 {
    if (jj_scan_token(tSTRING)) return true;
    return false;
  }

  static private boolean jj_3R_factor_2272_17_29()
 {
    if (jj_scan_token(tCHAR)) return true;
    return false;
  }

  static private boolean jj_3R_factor_2130_17_25()
 {
    if (jj_scan_token(tITOA)) return true;
    return false;
  }

  static private boolean jj_3R_factor_2127_17_24()
 {
    if (jj_scan_token(tPTOP)) return true;
    return false;
  }

  static private boolean jj_3R_factor_2265_17_28()
 {
    if (jj_scan_token(tNUM)) return true;
    return false;
  }

  static private boolean jj_3_1()
 {
    if (jj_scan_token(tID)) return true;
    if (jj_scan_token(tSQOP)) return true;
    return false;
  }

  static private boolean jj_3R_factor_2119_17_23()
 {
    if (jj_scan_token(tNOT)) return true;
    return false;
  }

  static private boolean jj_3R_inst_invoc_proc_1232_9_14()
 {
    if (jj_scan_token(tID)) return true;
    if (jj_scan_token(tPTOP)) return true;
    return false;
  }

  static private boolean jj_3_2()
 {
    if (jj_scan_token(tID)) return true;
    if (jj_scan_token(tSQOP)) return true;
    return false;
  }

  static private boolean jj_3R_expresion_simple_1919_25_21()
 {
    if (jj_scan_token(tSUB)) return true;
    return false;
  }

  static private boolean jj_3R_expresion_simple_1915_25_18()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_expresion_simple_1915_25_20()) {
    jj_scanpos = xsp;
    if (jj_3R_expresion_simple_1919_25_21()) return true;
    }
    return false;
  }

  static private boolean jj_3R_expresion_simple_1915_25_20()
 {
    if (jj_scan_token(tADD)) return true;
    return false;
  }

  static private boolean jj_3R_inst_invoc_func_1320_9_16()
 {
    if (jj_scan_token(tID)) return true;
    if (jj_scan_token(tPTOP)) return true;
    return false;
  }

  static private boolean jj_3R_factor_2118_9_22()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_factor_2119_17_23()) {
    jj_scanpos = xsp;
    if (jj_3R_factor_2127_17_24()) {
    jj_scanpos = xsp;
    if (jj_3R_factor_2130_17_25()) {
    jj_scanpos = xsp;
    if (jj_3R_factor_2142_17_26()) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3R_factor_2238_17_27()) {
    jj_scanpos = xsp;
    if (jj_3R_factor_2265_17_28()) {
    jj_scanpos = xsp;
    if (jj_3R_factor_2272_17_29()) {
    jj_scanpos = xsp;
    if (jj_3R_factor_2279_17_30()) {
    jj_scanpos = xsp;
    if (jj_3R_factor_2288_17_31()) {
    jj_scanpos = xsp;
    if (jj_3R_factor_2295_17_32()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_6()
 {
    if (jj_scan_token(tID)) return true;
    if (jj_scan_token(tSQOP)) return true;
    return false;
  }

  static private boolean jj_3R_factor_2295_17_32()
 {
    if (jj_scan_token(tFALSE)) return true;
    return false;
  }

  static private boolean jj_3R_termino_2021_9_19()
 {
    if (jj_3R_factor_2118_9_22()) return true;
    return false;
  }

  static private boolean jj_3_5()
 {
    if (jj_3R_inst_invoc_func_1320_9_16()) return true;
    return false;
  }

  static private boolean jj_3_3()
 {
    if (jj_3R_inst_invoc_proc_1232_9_14()) return true;
    return false;
  }

  static private boolean jj_3R_expresion_1827_9_15()
 {
    if (jj_3R_expresion_simple_1913_9_17()) return true;
    return false;
  }

  static private boolean jj_3R_factor_2288_17_31()
 {
    if (jj_scan_token(tTRUE)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public adac_4TokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[34];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x38000,0x38000,0x4000000,0x0,0x400,0x400,0x10000000,0x10000000,0x1204000,0x8000000,0x0,0x4000000,0x0,0x0,0x0,0x1204000,0x4000000,0x1204000,0x800000,0x1204000,0x0,0x1204000,0x4000000,0x10040380,0x0,0x0,0x0,0x0,0x80000,0x80000,0x100000,0x100000,0x10040000,0x380,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x0,0x0,0x2000000,0x400000,0x400000,0x0,0x0,0x23c0000,0x0,0x1800000,0x0,0x2000000,0x1800000,0x3c0000,0x2000000,0x0,0x23c0000,0x0,0x23c0000,0x2000000,0x23c0000,0x0,0x203c018,0x3f00,0x3f00,0x18,0x18,0x18,0x18,0xe0,0xe0,0x30000,0x200c000,};
	}
  static final private JJCalls[] jj_2_rtns = new JJCalls[6];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public adac_4(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public adac_4(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new adac_4TokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 34; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 34; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public adac_4(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new adac_4TokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 34; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new adac_4TokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 34; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public adac_4(adac_4TokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 34; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(adac_4TokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 34; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[59];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 34; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 59; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 6; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			   case 3: jj_3_4(); break;
			   case 4: jj_3_5(); break;
			   case 5: jj_3_6(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
