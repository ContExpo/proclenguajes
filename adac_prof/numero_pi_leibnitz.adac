procedure numero_pi_leibnitz is

integer n, pi[101], sumando[101], resultado[101], limite_n, digitos;
boolean sumo;

--------------------------------------------------------------------
procedure iniciar (ref integer s[101]) is
--------------------------------------------------------------------
integer i;
begin
   i := 0;
   while i <= digitos do
      s[i] := 0;
      i := i + 1;
   end
end

--------------------------------------------------------------------
procedure mostrar_numero (ref integer s[101]) is
--------------------------------------------------------------------
integer i;
begin
   put (s[0],'.');
   i := 1;
   while i <= digitos do
      if (((i-1) mod 5) = 0) then
         put (" ");
      end
      put (s[i]);
      i := i + 1;
   end
   put (int2char(13),int2char(10));
end

--------------------------------------------------------------------
procedure sumar (ref integer s[101]; val integer r[101]) is
--------------------------------------------------------------------
integer i, n;

begin
   i := digitos;
   while i >= 0 do
	  n := s[i] + r[i];
	  if n > 9
		 then
	        s[i] := n mod 10;
	        if i > 0 then
               s[i-1] := s[i-1] + (n div 10);
           end
		 else
	        s[i] := n;
      end
      i := i - 1;
   end
end

--------------------------------------------------------------------
procedure restar (ref integer s[101]; val integer r[101]) is
-- s = s - r
--------------------------------------------------------------------
integer i, n;
boolean llevo_uno;

begin
   i := digitos;
   llevo_uno := false;

   while i >= 0 do
	  if llevo_uno then
         n := (s[i] - 1) - r[i];
     else
         n := s[i] - r[i];
     end
	  if n < 0 then
	        s[i] := n + 10;
	        llevo_uno := true;
		 else
	        s[i] := n;
           llevo_uno := false;
      end
      i := i - 1;
   end
end

--------------------------------------------------------------------
procedure dividir (val integer s[101]; ref integer r[101], n) is
--------------------------------------------------------------------
integer i;
begin
   i := 0;
   while i < digitos do
      if (s[i] div n) > 0 then
         r[i] := s[i] div n;
         s[i+1] := (((s[i] mod n) * 10)) + s[i+1];
	   else
         r[i] := 0;
         s[i+1] := (s[i] * 10) + s[i+1];
	   end
      i := i + 1;
   end
end

--------------------------------------------------------------------
--------------------------------------------------------------------
begin
   put_line ("Aproximación del número Pi utilizando la serie infinita e = 4 - 4/3 + 4/5 - 4/7 + 4/9 ...");
   put_line ("");
   iniciar (sumando);
   iniciar (pi);
   sumando[0] := 4;
   pi[0] := 4;
   n := 3;
   digitos := 50;
   limite_n := 100;
   sumo := false;
   while n < limite_n do
         dividir (sumando, resultado, n);
         if sumo then
            sumar (pi, resultado);
         else
            restar (pi, resultado);
         end
         sumo := not sumo;
         put ("Pi con ", (n - 1) div 2, " componentes de la serie: ");
         mostrar_numero (pi);
         n := n + 2;
   end
   put_line ("");
   put_line ("La convergencia es lenta porque los términos de la suma son prooprcionales a 1/k");
end
